<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell学习笔记</title>
      <link href="/2023/09/21/Shell%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/21/Shell%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="错了错了，再猜猜看" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fd661cf34937f2332e930e3738f7238948f91ba7858ba59448db6f557902e8e4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记#</title>
      <link href="/2023/09/21/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/21/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不对，再猜猜看哦" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e0f31a9470aa71a950392f357f3199b9cc1af7c06d00a41f8c38b82f2f41fc06">b73bd50429e4d350727cbeb8853cc6e0767e9e5da1659ca87b36b60e5c434f395db81b8fc0ca1d634da1630916707e89bcd353e58feb30caea2487048a0a6da0970898b7867e7f9c9f42568ba8f6a78e41bd8039e177588e707b9479e84e2ed0ac791478a9d4d9a9d2a4efe4e919876c12c9c0b3ba1e0a101a82d207707ba5b37cab3ff116e5741408015d2953b61cb19b5ebdc928e0e61ec401e2fb83f420e1ad58fe3321abae4bcd217cbf669965aed33b51638d6f4968b734b11286f9b0e379e89455a88942d63f0d1cb21b57cb50e06bd832e102e50b43603f47def64bae80a273d911fd9a4e7acc3517b77aa1c2988134bdb7573a46d19abb7d887f51a2a112a6039e8a71bfb4b9ef0c41f9e79984aeb386a43434a1aa07dc2e4d280de142a686af98305b38419918dcc17eebf34f85ae1aeafef7aecee13c2d4d58af4e11041fb19b01904825b8df3794e53cae982cfc67f30134de596743a63fb24ab904f87d08f78d9eaeb17d3ce9dd086d096791f986df67ff180694da124617c8d70e6b166c3a71a5cf10fcd9a459d1fae4fb408c756e12575a05d923d32c3f4b5f44b5733aff32faf5d78b67f9f2b8223584b7074d7ab758014c8bbd832d10ab71c308c1b62786394c0de9fd784414fcd589960b61c72bacf6493e178b654863cc8a6318f22061a2f16000699fb4a25bf7bc2d4351c3c5f012f927ee6c253c43f5c502e7929733e788a0249cd6a5d58fa4ccfa2b9e0674fe1ad1725546a262e502cb889319044a7b51288d3c0d07e2fdb37305920f8c7eec2ad445dfbc0d760387638cf33dc4e5f61bd6bbe82fbfd4d97a872eea864e176f3321bb0be329563172f8cd5e59054d54c104c0678a95202aaf1b63c086575bb40496111f67d5be9b7f480809c4fe3aef01bf777ece11ceec6681dc5844d74cc200c8566ef778e60134ecd33567c4f968058f3e21d8557e17f0fbef04730a07f69e655c787cdc478a53165fa79db0244ad6cb778112346d0571ca247e83eac102b88472eeef43c0000463fdedd243bb405b291954c7eb24336187bf95384a254bef1d35d6667f2b325155857f917a0c298c1c8116317c144d7fa9515bed4d90a79cee571b58c9873c4b64bd768cc90554b39ac948e4dbaecbde032133356e8b6fa84c0385bce8dcda207fd98fd493394a166c3ddfc9e236f2a1ae1260115da1d0eb5757e91e9b80d254ec394dc18fc4bc50a4f786d4be6cb4c14efe956dc5b6d0767be1ee65a2a85cca4da2dbf9f5a9d472d000a67b746b593ba4d20ad8a2a17b77e4d91188b2064e06dd5e5a12fd5a613abbfb5e6053e7fcbe3e34ea8e7cf0937d0fff01679c3ac57718e900e3c195bf7e72355a30818509403070bb7330e194ccf481abfb8b23bb472fd250adbff01384af20a27a973da651499ef5077310a0cc3792efc44416af00923e8f07bb67dec81adb3d638e1ce54acb5ae35d1edc4f5a580ccff533749d7cd3db1f415e69e8b2be15a3fc98b68864699a3ba7e3410ba61e369e1f4b85a11ed4b733564b521df418be8d01f0c08586d15558d0348d7714058a0121a18784eedad9458889ee8a890d965dfa94a8f1cc5d7ffe813424d106dbeed765670e73e93b83b356397d1a5808d95d96c2e13ac859f4b70f32123cc79810a84dff1e69bc24e0f8e7fd3ac61a6e8026f029f0e81b196eac8d5d80013d2364f6349b00022593317a73cba101b3fc91850c5cd46805f8cf6b0ad736adfd06a9aba6122a215410f0b0b0438af35405b628935f77e63a96630cce389112714ebd62668250140dffb6c385b501884e80f490250264929972e13ed3c58f06eef57277f3b84d49676b1d5d35799a637918d1a227aa882569cbefa2a983494855f8be9aeebb430a8228cb32ca14b9dc4896390db3e66cd33f22025d38236725e3aef2c844628d69694b17ddf40ca7b1de780562bbf5d86dc01dd4502ae7d2b0a19fdaa7dd313b6a9def232ab4ddb762fa3545645927febc87173a49f78e4ffc01603c89595dc52821ede510d189751e46db086d968e1e02101bd12b2aa7477c87afaaabe785bf6ca622b4d4159725b318cd48fa6a157fd1904ab3800bb123820395af71b64a4821e874ba22834828dda41e06fe263836a88c5c433dd51080921f969f3232411c3300d54f7404c1a3350330f4306210a3ded520cdd5037c7c52afcffe65db36f661743e7377dd738016cbf746a2ec2c88f5990b78c76dec12e11d10b04310a1fe258ae5e6980a3a050c456574064a4a6f4bb5f167174635c8bb942961cec7fcdc4f551d94cc2bafe70aadb169182b3a1f9d1297b51d58094c9f968922c321cbe18b4d035034fb8a313c558ce31146a4b6ca5fb7f287d43ad0993dd4f4c0f9308038b2a6e97625e1244e806b9a2ff972688e368467856cd0551428a51f64f7b448533795224e37e4f618c33243f2c1ec17b05ef45835fc97924141aadfd2247223acf9946c36706a0042f6275481f5f69be3b976bd60e59e67d6cde8238d405783fdfe7118a16a063d0244f32098e7670c516bd5550b6c3d6c7d188b362e71806d0a167e19e1e4d9dc785872faff8f4cec6998a657687b38d5f094ee97df5cb3ad380f2b72a0ebbd3b64398d1c560ca9bb28fbd8836d644e71c06f91b56e3e26643c00c8d7dfd3e18e8aa4bd518d3877656ce969d8597ead1351106411f560a43aa1f5cdecee66419e8c395c72221a1841b60534091deef531adf2a5119d5629039fcf13b3218b12f23034d312053f5c62f41abe76994ec7935dff8731ed6723646562105f379f42ad6f444c4a7ed048c1f34d7411c61b6f9c02347db3f87f4cdae8cae763388309cb7f81d1e418b5b6e064b364f238a9140792f3b56a5e021ae1ca5653ff7ecbfe798f9297f80bafb5477759c42f8ab5b3bc9cab71fc04b174c95a879804d7ab6ec553a812d72efde7e6ed1f884b88a8f6a2872b297271b2b3e6b16a10dc70648de64a0c923244f234994e7f06b485aea7497f407ba7850ab6921ae4cbc552927b1204233b32e0832d5e572891c5f0254e47daafd976f4af9dad122afc3fae3676d8f81e5fd7691aac481bafca3a2a9df29fe6691278073cc0d81dbbfb39586090cd464e65557905ee8ef592bee000ef129d35e90ba124ccee6ccb1241575244ba65bc4b48bbc62e449590e26fd7a6d54798fc7d856e339528f5eba25e73638fd5449e8ea56d331f0a5fc5c5bef2cafb199ef33930a007a4c5cae88f9fff41849369a84f5e15f58fdab9ff11b56fbfb2e7f7abc6d22aa2bbf8a9e4abfa05f6a7f5c7c4b06e0a2ceb4f2dc2cc5fe28db3d079aacb8f5461bd1c91104777f96dad659d82a599249bcf6d715009a22830e3f4511bb495530aaa7cb18873d4e36c64e09bf325185503b11f26037ba4666acd72ac43cdba2dc0184423419f1b6ff33017e2c6954de9e7d2898b7e97d867f5b0006be6d87c5975029a13933bac387c8e84c352c225ab4a6af9c27495acd20407c00b596acf8601651d9ba6de9244daa7810019e3c57edb2e628b44f00ce3015bdee8fdce3ea6b3c1d0f54afe96afc5cca7409e606b170f0b61cc422e3b92dfaf18951dbdbc047a7172c1db3f0a7d27273e5be2beb635fa66447007aedec9d0bf66f3d1360371d62d8b5100059ce71b5bbd3364a709d9ae47456b79d4f9f4cb075f6e87b53acb0949d20588e6890b8c0b3fa235e479d81006d2aacd6374f587bbc6344e824ea9402e008dd1d32cb3a43ca3574daa7f8be84fecb25c994fd1ecccd353f8297e99037c2aa7015522534f9113f81c3dc3272747add6831bf0ba7bed7470147e3ca7b877ff06dfa3e5ea27f1a510838134e883ddecca468bb5203fe4e54b2df4e799628969f3f98ececc2d79711f34bdfb83bbb765d22303b18a68310d92f6253658ec0d131b558b04c37d649bcba9b55c774994ebe8da7c657c8ae3a87dd40fbe41610635e51974d74ee4298eca7dc0e7a1a443ec9e7a49527f49219e98fdaacffe43cca17ef174bc15a0d3b89fcb3619961f85e5c2e110a40ad2e7d3da8a58a3d7962cefd9a4e69a86285a2c09361d49a47334315c580de076b14eb98f566b97f284c637ec60468235c453414b98de5edd1db168ab037aae3364cf303b9544d810631fa07a2fd0b09162f6fbf2ce588d40230b7f67de312b18b4edf09862e3e807355dda8ebd8f0a6db935e5e0b1b377dde60930f9d3690713580dfdced3cdf8d5ace94ec51c2a6b7ae658810076dc1fb6d78b417d07ce74925cf38274b3e31ac98411c9b291f4a3fa98c53a009a13638165427b9f739b9b8cd1ec32de09d18ac29ed374ea0cc96913c65cbd6c85cc64acec985efb109c3d280374307dfda7722a1cd4df359c6bd35b98993d0ad1a08604bfb28bf13f30794dca0ac394a99ce5366433411eeaf30ef1188eaf4732611b54fa7a43d557315affd0625cfa6d0f88378e1a03d36206103e482acdaca8ac555764f902e90b2ff1b5970d0fdd17d715f9b1e7f522e8f964f9ba51585af3ee6d1fc6245579b5133a3cbb6c6466f180f2f14970e632a460c50e4e764fb90467287b243008cc98fddf1ec26a8838b62406b6887992e6920a1ff258b46102d62c85ad02097e68034a2a01cc215b2b18a4152f8c7db71bcd1660055b134708cde13636c1f6a03c1b407aeb8d0d053eff1739e00e18592248981ce843ba8615506f0d88f1e3e2ab7c39f8489bff0c0c666f53e34ff3a55dbe16df733a29fce0a472ab84a046fd078e7d886b201f937c170abe701394b1df40b019d757666aa11b693cc97fa5406d40c96a24fef313f8ac6cb70399664dea0cc2a65301653c05219f8e586e3d0fbf39f31049bb83407a8e7658ff48ef439edfb3867a05af62b9f897be871a46e6629af2ff2c071d7fca12d0d1619367ee5d868d3cd46459440ad7aa0080912427edc1015aef3e2da3a8e15d0c795ed02aa024c65bdc44b6627dad9413f861a81bfc4a07734ad5f1fe33102076bd3571382e21bb431cd77ea71dc7b70061db1a3ea53eaaceed118c658fd3e29d65eac5f3b8d147fa894761f706f65873c1b0512623930da0e3b1011dd17618ea86daf490af0d5f6be6b357824623981cd88d3c1edb20ea1f7062c901cf740d976dddb21f3cc9448dc7d779595404d64fa71b7b88573cd5548409ed4c07ec7e74e4969836e1faa9df0ff6bf7f66e77d40a0b075cacf49c6d80ea7cfab5ce67c903939d216afd754078164b0f7a94d0b350fa34e5b6b2dfe69c3fb92edf8221f368aefcc140b1a88cb9c8abb6a3ffea184e77188e596084b151f70ffd7aa53fb7bc81ac8373ec367850ba99a050d9a3ac9f8155ee3ecee526d4f1add33dfc732b466d7b180f8f1b35882da884e5dc78b29da5d8fa2d2bdd7bddf15d1945baa176c15a00072b108858226fcb3a673203f58b850a0a0b93b0743488a02eeb680e3811f6e0c93052be24d444c8ad307d06646e12af10fb8af702a414180803c6c1af02f957caf258ac2130ad1a307ae9bb8723134d5f64ee9d591d8503e4ed52b94eb23fe26ce57b112df7fc9044d282ea450bbfb19c02019e514d180f4036e3bc83a6952f52b191719223af8389dba850047d8f473ee4dc6c8b9ccc5f5e41eafff235aacc0e6546b28aae7b57cfbf1fba1b9d890c6c9d36ab3d22880c5ec79588d87402dd294174f8d342b98498671b40a79c47757de299cc365b9cf7e8f4883973bc1603f2b058f09350fd0eca7957ef695b720f575779923f16bd88b8f58b96ae6755b014b4966fc6383e874302408969f233d970270e2939c82d198af3eab02233295ddd0e177f405c51a1de6bb139868b3b81d31da6495f1993721e32f7b235bdb06f25a4fce4beb4c22eece5d8fe2de09f88bdbef8eb48850847f3ec1c1c330a733a9de86b8dee9aac4caf2b6d5368371c2c7ff709f9467aa3f844b306c138133de5afacb405bfb8dd6525aba4e1a3269a862c39f79a1ee00c04d3993ff2fe11798fb5d346f895d2142dd8babd43df312105009bf102ded73d50da2bf9203be11925934abc0fb2c2a8d87bca65f33cd2250125a6ff1b70d29c8000bca48333c7d9646d25d46600b4d5c8ef2de432dffbc07cff885ecadce6c3f7851b0c031c9424fee8920938c5cdbcdf2c642e44a081e2c5f2e543a693eac0856b69dafbb0c134848aeeda759368645c407810d76e6294b92f155e5a4bafb266cc46489909d0592ea32748c3f09d1356d6316dc2b26f48e6f5266393613383e1abb9676a738606e62295156ec9630d5462488df787783def1bbb4d33898b20f649b27cca500be10a3f443d34d279aeb43a1dfea59dea1f338a8416f2bd01adba79cd451b75226c69ff3101fc8430e4374eabb06e4e5e8d74f87d0333858e97c745a3fff3e057e9d6fcae4fea93e81f72643275b5ba85bde93fec940dcb8d1c1a65dbfa0a64f6d36d2733933f0aca7a5f8be8af728159d548da92fb48a774da48e50e3b4853afc9cf1fdc63646e4ba3272d8d028dd19deed6d5bd6717b03a226852790c2117e0f5359a5e7b90992b9763e65ee3a4be36965def46e7619feff1b6b01074ef56e8af2a5203bf99ce11d8b60a98696f5a1c1551e75c74bef20267ff9e1b3eb8f38bcc05f4aaad4b3939d5387528e94f82b42eee6e7c4e72db2495c4aa6442b10d98b54c841d0aa548d7f7d8fd4614bd7e6a7cbec1b5c412909fdc76e884084ffdd6dc55568a85191c7a985cf41c9221e66bba0f864485d9a9906dae6358592c521bd71daf01294d318494cc2048ae077b4b8085bc62ab1172156f91cc6f2032265e70d28f2b1488037b2bfd02e5cefe3d9d29e22407742e30fbadaf9b23ffcab39ae4df8569d8ed5de2bd6a194b2a392d58963089bfecdc28227b019148605c2e079a7ce7e3961dc2a9de5de117765981e41ef614e898c70905ee6869a788c819ac5b050d556d6ca3a5cb53cb7cff9060aa00f506770e74aedf1d225351082c96c4ef578ae7942f54566b46b80d584f5882b8b65d7c47af9adc9559066bd2c6f31ac17018a7c95a362bb00f45ad3463ddcb45f8132def34669fb8cf7f1e15295e000e0e92239d1f2cd240eb3de33817bc48883dee2335948206fb1e5b93a6a0a6166d5519f094ce3f86dafb04b9f0d195e8f1509d23820090023d758fd3e37113a505f18a9af8be12da7c6b27ca2db9b1c4ebfa7969805ff12c9884d4cceefa6e6bb034e3b479526df71444194ad49de388c8f3fe9d669e228aa7ea44411745b10dac133f544a694db7deb63eb7881753be3e2a9020e43360599aa38a1a90173b4dc366e292031a0e42e993d8fa31901e836abeced17395081e91d18dd7c1598f019ea8090515458e083ad2b28a813e19a1feb017f378817940161a9cbd36a44e3731485998f8563033a0cbf8a858b89e137a52000c8d020a9d367e195e1ba84696f50654f07dbe6e792ef0f923550f7d805c9291a094b26165d68dea05c813139366fded3b7dd1febe93b20634880b7343498f525aa09ca38a5542776ecb9a0d21ee06cd8d9c4b138b3c6fcfdc6cce4b7415e8e66dfb937a558d21c26639c365aabcb07c83802f053e36a1e508a0f69d7733b8f545b205bba795ef60cf50de47270ff81ad828f56c1088d959778bdc18c177bb32fa8e5aa5e8abfae84e16f691c79f032bd11365bb57daf5fe0fffe889a40bfc0dc760e6932fa665d9f17e623c3ca2b08d5711489d733401c3af24190c7ab8a54142ec7d61baacb34f83947b0e0e43191a7ac82ef184761def0908237285d7c65388ff8b9c7ee918bf627e16b4cf05390be02d4638bcda97ffd88b1cce9286c03cf1f653fb1bd3b5861e0faea577ae5e09ca83a5f13567dc03eb226f44996f4902ce88a60612aaad0db09bedbe6a7f76cd16a234eb6e70c57e828c74d77835ed32e8289f975da5e58207f709891b94ce0e9fb1088f3858f42d30f9b233f7a2fce1c569efda4888b7516cf73e2562606c8957fcb1d29bc20827e3f8af79b8139d6dff076a8fe54c5c26311aec9a08b00ae2d8d7822e7c08b2ce8933e6eb8a21072ff37a8995166a278868df7865b71dcee984567e5769bf5a6a03638e78a9dfb315ca2ca81c8e204960ac856437e80734ae8465e6db21e606641424d93b003c2b4d71bf3d59e3cd2c7f1a90ae6a81bfea8ab28b1fd5e600af5677cfd88da94cd4c0e2f1632352998173205cf4954484cd19c50ac8c122afbbcc9bf322cc2cb5f2eec812af5b4fb403daa993dd16b7a0fcbbdd9c6b79c2487333de1dd7d82331453c05ab5c87ff5d70803293776eefcc0abe6d8b5d543c185cede0920ba4d0ff8bf80f78ea2102ccf522840ab9cdc675ecc1c42f6b9799fca0503719bfe3e7d360eaa21d00ed3679f423a7d49a8082033f79f9fc232f39bcbf0430848311167f1afa5930be9c4b565efceed32f0ca2a3af730305245428386eb7e36501a2120c640319f771f186f50aec7a09c416a288e3b5c6e2ca4572de3aeca3a232f8846e787f02668c8d93b8d0a239ddeae65d81c53ab2fe4d229510b67b63e5f0fa4da915b715ee3b1c9afbd3d9adb568197aedb2bebd886b40aff91524db1f9a486458de3591f59caafbb690b31c57b18b1fadd9661e1776c3c8351a251dd73edf2c4fb516f22d253d5a5af6876a6c8d9c962824d70b49f86a56f2abafd4ecb3777a1f68b5b7c03cee817808112bb58568cb598c1358951eea44266062b555a3f93cdaa30652a9b0159f0ff68141e943413d1de111ba791bfa0a00285129db3fa908d72928ba6e2fbbe1654457a714d942409248ae30b43fe21e75fb3086efebc10ae994e5a87128cecb011e806c49414dd50e8c080324955c7f5ee590310491a1d48151abeff3ef1bf40c8158f95d863128bbd8597685251c475f024477934b247ba7d3c495fbf0b99fc009b32dae1ff5f1a30563176e507e966fa12ee5ca37373aa172885489078e783677ca40d9e492f26a91d1b2e2febbec4bde50c4b9198d99eb7501b6e6ab6d98929cdd729d67a0dcff993759acdc0da448c7cc2c6f4a6c078d26d2863bf3b6c8ac2cf4d0dc18763cad9c5b3f1926a80ef3f4d2131c35940a26d0528ef6a12b80516735bda2f86a17cdcf75a808e11c1bde8c5349ba92953e61d5f5bb4f7204d773a1e56e9c21bfd1c247a8272dead99d4f6460b674af025a0965482e865dd53449f23795fb2b0578c9cd5b3388671c443efba67375995ade1126de6f783d6bb11b3835f397d96a2f52dc08048d2a5a3a1a8bfd8a45e0ae6476410e1e7dbc673120c7cd9fc8156808bbf26f49089891192d97c0562c8f1968e43a2739b33d1876981ee583919eec7a401f8a862e3eda648fed1a30a94d0e44aa2710aab98f405e4e265130e1c1bb51b15f81b59bfb2f8d592f3e8ffb78b35346e9ddaa1d1aaf1b1c43603733c427be15964dc82f298442eeb8339523caba143987f81918124c822970ea82d7b8f647ed57d5d90571d9b74752187daffbf44b24de7cd94a09abcd7cef81b7f717a5cbb21d224b3138d1117fe9d7fc322174dad66e2f4ec21f6788e2b33a8b0db6d5601bc0e909be2142b55c163b0c66eb90361eeefd9e1c9d2cc4cc9a54599f83b8aa7b96de740320954c8258d2736cc33706da26691e7bc655209b2a0639878916fb912bcf4b044b06f21d41a7f5888502d4e0736e9e29443f3bdf1411ad1f5fa61d2567bf340b4df8c1c47df58f19401fcef19614266ba4d3d17dbf4fef9d64bcf81e5f5ac0a1d913b18ec6aea8088fc78e7af02ba7a03aed413c54ca1ec3105a995ffab260412688009d2e7fb2794536c9adc5344dbd6e0638552152862ae7393d6bcc06e67d2b8c5147bf5eb30d7c453af3bfa5ef582f344520707bd035fa338827859a09c37638d23132f198efd93972028be64c7675b07028b4e9435fb5112f8e047673086a682bf4e00416468e58a89f17a3e16ba2b8a110c6d0b7540b82dd6668208fa65a345de1c555b6f8cf376666a8b0bd840ce391813de2038da83920316a9fadd3652a6f9f7c08932989e4779b35e8736a547aea08a112818eabe1fae9ddc7b95ef9b598178449a529d515639eaeb47353a07dc12ab56ba2bc3dc7430dc1a2fc988cdef91841d82d2932f098b2a8871f4f91853a1d25cbb15e11536ba57c2980abd7377bc7a9ad5c0ebf46448fbb937fd8d6279b968de84289267e2619c70d0452919041b921b2b255ba3bea6e13d0770b57e6cb40b25a7e92a39b27b770ff8623f26af0b314c15e0f8a7d65b6e57f063a317e7568f777664b1960638616d2f15cebce78c35c440fb51b57a14d320829a9563d12d8f644fb1959681cf067b7235a66c0311c3cc96c5964d133cc7578b85d293a00dd2d41896a9a77010e2e5329589e066819752e93dbe627b39ca1c6a52f4227d2e3bbe46aadc92d74c5c1810ae9f8812972db6c57b7c4f77b2d7349dc2ca351a7d1fd4bd5f19e28bda61db224b56dc6bb7c0fe06cb9510776940ab07f0500b7828d7ec346c121ad3adb1d01f5330ed20d135d6de0a315df3aacf685d696b021f2d98f3baf9d33e49333a032afa847b5eb2c67fbbfdb25ce4db75d7599cd403ee2cf820e7ccd487acc1b5cb73f549f8634a496d151a83d569e7beb39aa6404790260844fa95fff64f97d9b16ebc53a0bce199dbeaa622058c9808e9dcda3fdc34f3674dd23864a32d931b255945f191282a20772485f616db31ab447bdfe298e3043be307d33b136d1ea9c97693b83de4a4efabe196f2ac56c76e3187a3eb20333d2eb70261615dc1018763c0ba3a001497b494987ca4abe466431c10784b2281712083935f7984abae2feb630fb57a9357a91b2f351ae3a703bf38d39dd29ee940d489196f2cebec9146776e1303b135b3a8999787614c4c0758a44068e4223d3cbb365e0e88d6fffa10f511929f2b54cd39e531f7973c79255eabccb747270503a4b6e552931e6396b6115b12ca6b9d7d6d83dab5347431eea9aca8f2bd957e9bfa7c26e959a0f37f5ae36d45ad4bdcd9400e43048fab5eb62ee5cc5c6accbd804ffa6af4fbb3e723113d99bd43bfb3e8b9fb5916d85f9373c10f7952730b288aa48691f165546ca7dba7b32a65d32622d14ee8dff638359888e864d886d872331ff8007d311a6430aa704ee44005be3843ce16aed91d7b8906bc26366276467dd9c698ec71ba4227f3da5251068f8963e892482e01409614fe343de90ebb57ec7eba00abfa5a1e4e8d950876899a6ef9f357c4e7550ce5f5d378220df6b2d4fb1676fa3e170b32e5c2c0ecda14a613b3625dbfd914f9c39f7f46e0a28cb063ebc844a42a05877a0e9e24ddd5a720ed764e95fd278ad3c02b2edc59a9a1ecc9e57b4d0e5f42191629b06a1b2d4eecdcba3965ba36682b6b5b4d1d0fb3fcf41266879b6e968f32576d23039bbd3235e26d1c50a95227c9bfe8eb0c395ccf66b9d9fff058331277840c1fdcb10e2234083f113607433412c3e2ed92a6ed8746fa41e8a79a64753a6195b082178b57c41448d3806b7a95e9bd1ee918e3ed3ff2faeecb77ab54ec980aef83417ba2b0abec6dddca7ccf344cc1412c520c5b945f76c1bc6123f8584727587495c3118ca5fbd9ee52e2e5055cf8639295c5b2c58481d7d0a11ee2f06412eb1e136a99a23af8d037754641b6ce2780dc28ec214a36375c47d55e525cbb6cd5e80df652e4846457cdfec80b3562751ce9f82589a7108391162336909b10ba30bba7749cf3e5b218829965e5783349b84c3155ea27e9392607f256aa920be7b183fbc59f631ecc742e2ad6bd9914ba4f06c807a175fc5f1cd341b8fbcea2037b8e0708bf517f688e91b958b7686dbf6ad68fcf22b2627b28b07fafceb02fdfc5d4c59a93444e2a2ef44ee3af64f8eb3f6255bb3a3aadf4ef25e34730816bd3c31485d60e3dfaa743d6e10ef925a17fc81fa497f3e2f01d12723bb4fbf55c0a39ce98d829c0fa0afb2886e088955d3db136dc8640ca866714a74ca9d0eb5bdf2596b09baa22b4ff6a5fae05856df885ce4c4bf442f3acf404665154dee0c29bc056e897425628292cf445571a2be86ffa6047ec3800709afcf44274ed5950f62a347f02cbb65e66d184b7d87de1d99395d73d3d2e360aadde36ea2956a35d15cf08a9e50375c1a192ba458352bcca04f75c274297b67c41e67b669e2e5b789a3f653c5d01963919c90daaf8f7d78bea62867bdba811066c547878bf6b68b1031d0602df1039aa17e81ce372db0b3749c4d93de525a06c4b6c98fd51431ec6ba6258e1d29e2de94265191d3e816e360a0502123011817518bddb0266f4568a7cb918ef6a49e500e444d4c622a97f6f26f96075de1dd2bd372da288fb621574749a1ba194f08c340f7c1d43d9088c2f6d43b51861d060406df99290d376bc42f39540bfcfffc31713468ba90711951ac5385ff705dbdbc171299dd622ddd7147155f19005a8a27e7816af150cb02ce6e06e92b4a1aff298df1ecdb6a4ce0604e1591e7b7b174d64c4651eef2d25f24c01e743e245a5db977ceec151bb49ad4870ca6e73627b63383b2a7815a259f2dd07914c599e1bb1aea301783dabca330bef919c6250993ca3fa87899993aa8939a8ba8498eeead57e26d9a04e1fb2d862ecc0d4fabec993adfd878284f1ebf3489e3353bf0de9b5f34cfc2266054c66f7efed1373bedd94ca0193a7056ffc42316bc5f3dbf4820f2265d7b5baf8e96442760fd4fb61dd1618bdb1e38bd04532a7d236cb333bb4377bd39e9a008485b146e7e907e69ead1cd27b10ef2d0b32e18527e1188c9afe15cecdf8b2cfbd1729b2de60eebb6f44ee4ac228c5a7c61dcec632f40bb794e99e81bdb7e797a9c897d4330de2394e6cf4ae025a982c38bbd02675672156fa91152a0b9e3bfcb555a1a59dc29ba46361d099e6a59b4b957ffbdec5c92517fc9b5e5bb7eb78130a552165439c0ef4053faacff72dffdebc65f8348a891a720601372498592a5a9e89f991703a0641eea8fa681dbf70041760602524519ed9bca021533d34be7105065d01881a84c41005a2dfeaff93598235ec5a59ecabc65318011e6c46bc5ac51022b7d0f8fa49a041a90c0e36f19e5aec72c50ae31f89ec2e3122f42c27288170448399423ad5374006670bf9f60fc090ec64ab823f27adf52ff7182be57c0128d8253277bd1aafa2b9abb7bba617c0e5e8ab068f199594e37fad5be8032f5a93f5b11bf070a485354a44409cfdbf645652e9e5b2f07759b076d5d10be079f4ab55ac667e45270c8524043e9c64901569b3849ab728b3cf35c4c8c37b1be230580f7bd7f46d7c58664ce0a38d84c5b4cb474be4e6fd9d6ed936ce04dcb0801183ca81bb99dea281cbc1f0aa165a570c677681e1081ccc264a148063016d6909fe4632fe9bd2ed3f75cefa5f4b12d8c7d0a5409814be571f45061003911eb807b67910414755c6ee3e289fcf00c892baa9ca5ac9cb084d28dc41a54450e258526d568503e75a4f496ab3e5a8f382a3f9a81bb180284de87314d3880711cf31439c969e9b8c62c12b96ae9bc708085458a8e95933aa5aa8e148b5f26d4718390c2abd1c770c0678b3aea80b81ce75bc82535d6e4f2cfd9696dd8859e6415fde0bee1d6aea07033e8126526c813a57a1e4b12e4e291291ea3455c0d74069360f575e3f95e579c6f3a96bfd283e2b03d48bc74af1ab8b72e96b23efa1dd98d5efeb3e683876a20462e39534c28c9fc92bea84e38e0ea21206df210590399b45fe2dd8d4a69ec0986a57a1345caac071157ef830bb66ae7caf4f4ad234fbc9e4419caf942dc8216ae9e538e82634139ada3a73ef18d3afac31e74103ab5598ee941e7022ea9cdec6ad55a978820cadcf863bd699fb1ccabf235aca536af77c27f2734da69d0bbb78e03630ac6b6813943e6a7df51d4c87e853d2a39fb942a3b3e9afd93f7c258de202e497f07c61d8c51393c35e500ea48285c7584b877c88d5bc6b13548d32d9726cf5325c95d176da34e50099d6d611c452722889dde25941cd6bdb3c2fc4293c81f61dbfc5465ae3d0d08afd107950a2a2b141f5895e6ab11f52df198977191a676407b6e718bde72379b64ec6947819fd97d876617d8a21d0ba539205b8bb8d4cb8cebd526358df1fb6234738d7dc16ccd5cfce380946d7e58744054254146be7ec16f271fb7e43e6001b20846e4b25a778bac86e9e579e5e396e67ce7d3ffdb9072e7c9880824b424a8b59f2885cbeac9b750f5741ea31f5080e6fa50dae63b4d3241fcf3576a6541b6190936bba6ea4083963b911c335e844ed7755b2fa419e6647b403e7003abb1d009dbfd14843a71e15050d14716cdbca79c1558087a7a536fdbd480abf6ac9cb9d4ffdc8fe0b1229978492b72c0b97a62b3173f7b81b26febcd917fc4bdcab36d6d47842a04d18ed9ffa026e3fab2a273f8bc7ed3f921c2319a474b242186dd54ff88d4a4370bc45d9f887bff2937fae34a6979e5b46edd45350139f3a7a27a064aa06adddc67840f6ecf3b9b7b4b9f6c365c8108d3f8e5e18b53580a93d1c5d7a99993ad2a7f5834ad0866d373943e36455d59823d4f6b45740139cd88a6c233872a4e753a348570bef8dca60c1bf4e65d3deef70e61a900be3f66298984e434a11843d77efe3ba52d4950f81cba487eea121682a44b506cbb59f7b2ecf51575e35f0cc06a736a88e9f904662e005de1e53d4838269f04ada7d34f93749508a4c71adbb02c7af5163b4ce36c0816373a83c565c81c26e4f72971433b17ee6fb3547ec8d7ee715b89e638c5db01171d88f544b81865e781c58457019d09978ccf78cf74ba011af158bad7f6e2b41b1e957fd3d9e2076f0df813e52f08edd127a6be5db5322452bf7a6d887dfb8bd2db3a5b7c424b43b4632140c6acb51b4402b9729c2b8229c6f40714a9b769907307ddc90b2c19f750c34d4ebee42f8d9a3dce7234632a817382105237e31975d9c3b57a61b8c4fea133f1885304ed75ddcc1b0447a7b5ad6d9a42fa820f8e9ec50eb53be694e48cdd3bfbf6118ccfb7ee4c89d1893b31707370cd1ef11bfdd5436ee903856b17e59e1028de860b37a9b0db00b796f1bf46140d4434efccb03a322f52d979e18eef2909ba49d16981d264e0e683196a740bd6105e4b518e0890913a379b6bea1048241fddc5b464539f7a578e58030110d92c91563b92ec53662a04306918d27db8fb8f35c91da8e831e27bd4fd3ff279098cd5131fbe8317ae0fc2522b0a6e56f1d708d7649c52df6867970fbee832186acc5c89fad8ee3a4b0efdcb52763b3562c425354c72405bda6580bb4bed9caf6d12d9ccbab75619f886aece389d9f7a7bf4f19dfa0ef4a38daf8e7939fe42f27eab9c002c4d68fbf321fc50952fab26033a0d2175d6d64b814943ef7576aac131c8333b882d11699b06455d4a178db6f8c8fdef07ef7bb7c80267ef55893c31031410d899471b67a3ea0c3c3d048fd7f7389ce25a2b10f919ebc5409aeee540d74f1770fe783c916eb75503a62bfe31ebd3489530bee0c4812d9697054c0520a497fcda58330f1fdeb550a3273d51026c53a55d66ae5b7dc79723d3766680ed63ece1239eb3c22da16cb4592043d51f577f559adef2e0b29cdfff4a80c74dfa74a26147d26fe1a58bfe6ffe99e68d33e1156b64c9117874c7b68c03068bb2c1702098f10aab9cf254b03635a19f23e0fd9cac97ea132472efb8314491966940ead60d9edeecb725d15a56e8e0eb74b20f475249e5a305a92021e706078a559f947e3fe4c03e77a507d0b17c90b861e0a232fcc48e8c3c1bd7f1ee5aa293c7301103111444e6d6f9088beb979d6589e2bcb50de6e72cc9cf0355a3be3792c6dba980e752afc0775e51744d0a7e3c19c793c5368d6169184ce43d85eb15cca439adc238109be3fbcba9a90c006157226f9a61bcca3adfa</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论笔记</title>
      <link href="/2023/09/20/%E6%A6%82%E7%8E%87%E8%AE%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/20/%E6%A6%82%E7%8E%87%E8%AE%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不对，再猜猜看哦" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e723bcd9ae90a21c33dd53ab45cd4dd1f5d53c4f785471b3bf200c8654992cf6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++sort()排序应用</title>
      <link href="/2023/09/16/C++%20sort()%E6%8E%92%E5%BA%8F%E5%BA%94%E7%94%A8/"/>
      <url>/2023/09/16/C++%20sort()%E6%8E%92%E5%BA%8F%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>#C++ sort()排序</p><p>##例题一：<br>题目描述</p><blockquote><p>某涉密单位下发了某种票据，并要在年终全部收回。每张票据有唯一的ID号。全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。你的任务是通过编程，找出断号的ID和重号的ID。假设断号不可能发生在最大和最小号。</p><blockquote><p>输入格式<br>第一行包含整数 N，表示后面共有 N 行数据。接下来 N 行，每行包含空格分开的若干个（不大于100个）正整数（不大于100000），每个整数代表一个ID号。</p></blockquote></blockquote><blockquote><blockquote><p>输出格式<br>要求程序输出1行，含两个整数 m,n，用空格分隔。其中，m表示断号ID，n表示重号ID。</p></blockquote></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ID<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//输出的时候在输入完数据之后要按Ctrl+Z，然后回车，就可以输出结果了</span>        ID<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ID<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ID<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化m为一个无效值</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化n为一个无效值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ID<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ID<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> ID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            m <span class="token operator">=</span> ID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ID<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            n <span class="token operator">=</span> ID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##例题二：<br>题目描述</p><blockquote><p>某次科研调查时得到了几个自然数，每个数均不超过1.5&lt;10^9。已知不相同的数不超过10^4个，现在需要统计这些自然数各自出现的次数，并按照自然数从小到大的顺序输出统计结果。</p></blockquote><blockquote><p>输入描述<br>第1行是整数，表示自然数的个数。第2~n+1行每行一个自然数。其中1≤n≤2×10^5，每个数均不超过1.5≤10^9</p><p>输出描述<br>输出m行(m为n个自然数中不相同数的个数)，按照自然数从小到大的顺序输出。每行输出两个整数，分别是自然数和该数出现的次数，其间用一个空格隔开。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> number<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>  number<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>number<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   c<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>number<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当下一个数不和当前数相等时说明重复数结束</span>         <span class="token punctuation">{</span>           cout<span class="token operator">&lt;&lt;</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>           c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="li-ti-san">例题三</span><a href="#li-ti-san" class="header-anchor">#</a></h2><blockquote><p>设有几个正整数a1..a_n,将它们联接成一排，相邻数字首尾相接，组成一个最大的整数。<br>输入描述<br>第一行有一个整数，表示数字个数n。第二行有n个整数，表示给出的n个整数a_i.其中，1≤n≤20,1≤a_i≤10^9。<br>输出描述<br>输出一个正整数，表示最大的整数</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>string temp<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> number<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">></span>b<span class="token operator">+</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//如果前面的大，则第一个参数在第二个参数之前，实现了降序排序</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>        number<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>number<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>number<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       cout<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过这题我想来介绍一下c++里面的sort（）函数的细节。<br>首先sort（）里面一般有三个参数，第一个是排序的起点，第二个则是终点，这两个参数类型都必须是迭代器。第三个参数是比较参数，决定排序的方式。<br>这里c++官方技术文档是这样定义的：<br><strong>第一个和第二个参数：随机访问要排序的序列的初始位置和最终位置的迭代器。使用的范围为，包含first和last[first,last)之间的所有元素，包括first指向的元素但不包括last指向的元素。随机访问迭代器应指向一个类型交换已正确定义，并且既可移动构造又可移动分配。</strong><br><strong>第三个参数： 接受范围内的两个元素作为参数并返回可转换为 的值的二元函数bool。返回的值指示作为第一个参数传递的元素是否被视为在它定义的特定严格弱排序中位于第二个参数之前。该函数不得修改其任何参数。这可以是函数指针或函数对象。</strong></p><blockquote><p>这里不用管严格弱排序的意思，这句话换句话的意思就是说，如果返回值是True，则第一个参数将会在第二个参数前面，返回值是True则反之。<br>拿本题的例子来说：</p></blockquote></blockquote><blockquote><pre><code>           bool cmp(string a,string b)          {                if(a+b&gt;b+a)   //如果前面参数1大，则第一个参数会第二个参数之前，总体上来看就是大的会在小的前面，这就相当于实现了降序排序。                  return true;                else                  return false;                } //这里的a就代表了参数1，这里的b就代表了参数2.</code></pre></blockquote><p>第三个参数可以自己写，也可以调用系统自带的：</p><blockquote></blockquote><h2><span id="jie-gou-ti-pai-xu">结构体排序</span><a href="#jie-gou-ti-pai-xu" class="header-anchor">#</a></h2><h3><span id="li-ti-yi"><strong>例题一</strong></span><a href="#li-ti-yi" class="header-anchor">#</a></h3><blockquote><p>某小学最近得到了一笔赞助，打算拿出其中一部分为学习成绩优秀的前 5 名学生发奖学金。期末，每个学生都有 3 门课的成绩：语文、数学、英语。先按总分从高到低排序，如果两个同学总分相同，再按语文成绩从高到低排序，<strong>如果两个同学总分和语文成绩都相同，那么规定学号小的同学排在前面，</strong>这样，每个学生的排序是唯一确定的。<br>任务：先根据输入的 3 门课的成绩计算总分，然后按上述规则排序，<strong>最后按排名顺序输出前 5 名学生的学号和总分</strong>。注意，在前 5 名同学中，每个人的奖学金都不相同，因此，你必须严格按上述规则排序。例如，在某个正确答案中，如果前两行的输出数据（每行输出两个数：学号、总分）是：</p><pre><code>          7 279        5 279</code></pre><p>这两行数据的含义是：总分最高的两个同学的学号依次是 7 号、5 号。这两名同学的总分都是 279 （总分等于输入的语文、数学、英语三科成绩之和），但学号为 7 的学生语文成绩更高一些。如果你的前两名的输出数据是：</p><pre><code>            5 279          7 279</code></pre><p>   则按输出错误处理，不能得分。<br>   输入描述<br>   第1行为一个正整数n(6≤n≤300)，表示该校参加评选的学生人数。第2到n+1行，每行有3个用空格隔开的数字，每个数字都在0到100之间。第j行的3个数字依次表示学号为j-1的学生的语文、数学、英语的成绩。每个学生的学号按照输入顺序编号为1~n(恰好是输入数据的行号减1)。所给的数据都是正确的，不必检验。<br>   输出描述<br>   输出共有5行，每行是两个用空格隔开的正整数，依次表示前5名学生的学号和总分。</p></blockquote><h3><span id="yuan-dai-ma">源代码</span><a href="#yuan-dai-ma" class="header-anchor">#</a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> score<span class="token punctuation">{</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>  <span class="token keyword">int</span> chinese<span class="token punctuation">;</span>  <span class="token keyword">int</span> math<span class="token punctuation">;</span>  <span class="token keyword">int</span> english<span class="token punctuation">;</span>  <span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">[</span><span class="token number">305</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> score a<span class="token punctuation">,</span><span class="token keyword">struct</span> score b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sum<span class="token operator">==</span>b<span class="token punctuation">.</span>sum<span class="token punctuation">)</span>    <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>chinese<span class="token operator">==</span>b<span class="token punctuation">.</span>chinese<span class="token punctuation">)</span>        <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>index<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>index<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>chinese<span class="token operator">></span>b<span class="token punctuation">.</span>chinese<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sum<span class="token operator">></span>b<span class="token punctuation">.</span>sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span> cin<span class="token operator">>></span>n<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">=</span>j<span class="token punctuation">;</span>   cin<span class="token operator">>></span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>chinese<span class="token operator">>></span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>math<span class="token operator">>></span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>english<span class="token punctuation">;</span>   s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>chinese<span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>math<span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>english<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="li-ti-er">例题二</span><a href="#li-ti-er" class="header-anchor">#</a></h3><blockquote><p>外卖店优先级<br>题目描述<br>“饱了么”外卖系统中维护着 N 家外卖店，编号 1 ∼ N。每家外卖店都有 一个优先级，初始时 (0 时刻) 优先级都为 0。每经过 1 个时间单位，如果外卖店没有订单，则优先级会减少 1，最低减 到 0；而如果外卖店有订单，则优先级不减反加，每有一单优先级加 2。如果某家外卖店某时刻优先级大于 5，则会被系统加入优先缓存中；如果 优先级小于等于 3，则会被清除出优先缓存。给定 T 时刻以内的 M 条订单信息，请你计算 T 时刻时有多少外卖店在优 先缓存中?<br>输入描述<br>第一行包含 3 个整数 N,M,T。以下 M 行每行包含两个整数 ts,id，表示 ts 时刻编号 id 的外卖店收到一个订单。其中，1≤N,M,T≤10^5 ,1≤ts≤T，1≤id≤N。<br>输出描述<br>输出一个整数代表答案。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">,</span>T<span class="token punctuation">;</span><span class="token keyword">int</span> locate<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定位上一次各个的订单时间</span><span class="token keyword">int</span> prior<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储各个店的优先级</span><span class="token keyword">int</span> flag<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记是否满足优先级>5</span><span class="token keyword">struct</span> store<span class="token punctuation">{</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>   <span class="token keyword">int</span> ts<span class="token punctuation">;</span><span class="token punctuation">}</span>store<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span>  <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> store a<span class="token punctuation">,</span><span class="token keyword">struct</span> store b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ts<span class="token operator">==</span>b<span class="token punctuation">.</span>ts<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>ts<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>ts<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> cin<span class="token operator">>></span>N<span class="token operator">>></span>M<span class="token operator">>></span>T<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       cin<span class="token operator">>></span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ts<span class="token operator">>></span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span>store<span class="token operator">+</span>M<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ts<span class="token operator">!=</span>locate<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>        prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span> prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ts<span class="token operator">-</span>locate<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果当前数组的时刻与当前数组对应的ID店的上一次订单时间不相等，就减去对应相差的时间。</span>       prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span> prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span> prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止优先级&lt;0</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>         flag<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//标记优先级</span>       prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优先级+2</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>prior<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           flag<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//标记优先级</span>       locate<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ts<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前时间判断完了，就将当前时间设置为该ID店的最后一次订单时间。用于下一次比较</span>   <span class="token punctuation">}</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>locate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>T<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         prior<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> prior<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>T<span class="token operator">-</span>locate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prior<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span>        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>         ans<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里我非常有必要解释一下为什么prior[store[i].id]= prior[store[i].id]-(store[i].ts-locate[store[i].id]) +1;这段代码要+1。我们知道这段代码的功能其实是想要求出两段时间相差了多少，比如6-9中间相差了2个数字，我们直接9-6求出来是等于3的，这个3其中也把9算了进去，但是由于我们到达9的时候是要加优先级的，所以我们要把多减掉的一位给它加回来 </p><blockquote><p>图解：</p><blockquote><p><img src="https://img1.imgtp.com/2023/09/16/jSuykp4O.png"></p></blockquote></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔(hanio tower)递归实现的原理思考</title>
      <link href="/2023/08/27/%E6%B1%89%E8%AF%BA%E5%A1%94(hanio%20tower)%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86%E6%80%9D%E8%80%83/"/>
      <url>/2023/08/27/%E6%B1%89%E8%AF%BA%E5%A1%94(hanio%20tower)%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1><span id="han-nuo-ta-hanio-tower-di-gui-shi-xian-de-yuan-li-si-kao">汉诺塔(hanio tower)递归实现的原理思考</span><a href="#han-nuo-ta-hanio-tower-di-gui-shi-xian-de-yuan-li-si-kao" class="header-anchor">#</a></h1><h2><span id="qian-yan">前言</span><a href="#qian-yan" class="header-anchor">#</a></h2><blockquote><p>昨天我是先看的汉诺塔理论上的实现原理，看完之后感觉还行，这不是挺简单的嘛。但是理论总归要去实际操作去实现的嘛。于是我就去看了汉诺塔的代码实现方法，看了之后说实话我有点懵逼.WTF？？？？？这么神奇？？就几句话就搞定啦？？凭什么递归就可以去实现汉诺塔?递归和汉诺塔实现原理的共性是什么，以至于递归就可以完美实现汉诺塔？？这些疑问困扰着我。然后我就去搜集有关的视频和文章，结果就是…我还是没理解真正的原理..很多博主的讲解普遍集中在将汉诺塔去一步一步实现了一遍，没有明确提到为什么选择递归算法就可以完美实现汉诺塔。后来，我通过对这些博主讲解的信息进行综合分析，总算有了一点小小的理解。下面我就来分享一下我的个人理解。</p></blockquote><h2><span id="han-nuo-ta-jie-shao">汉诺塔介绍</span><a href="#han-nuo-ta-jie-shao" class="header-anchor">#</a></h2><blockquote><p>汉诺塔（Tower of Hanoi），又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子(A,B,C)，在一根柱子(A)上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子(B)上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p><p><strong>根据上文我们可以捕获汉诺塔五点关键信息:①我们有三根柱子分别标记为A,B,C。②A柱子上有从上到下依次增大的圆盘。③我们要将A柱子上的圆盘转移到C柱子上，转移之后盘子形状还是从上到下依次增大。④过程中可以通过B柱子去临时存放。⑤盘子在转移过程中小的盘子只能在大盘子的上方。</strong></p></blockquote><h2><span id="han-nuo-ta-de-yuan-li-shi-xian">汉诺塔的原理实现</span><a href="#han-nuo-ta-de-yuan-li-shi-xian" class="header-anchor">#</a></h2><blockquote><p>话不多说，汉诺塔实在有点抽象，接下来我将通过结合动态图片进行对汉诺塔的实现原理的介绍</p></blockquote><blockquote><hr><p>我的总体讲解原则是，由简入繁。所以我们先从一片圆盘（n=1）开始讲起<br><img src="https://img1.imgtp.com/2023/08/27/9GS5fnYF.gif" alt="n=1时汉诺塔运行情况"></p><blockquote><p><strong>图中我们可以看到当n=1的时候，我们是可以把A柱子移到C柱子达到目标，这个简单我提一嘴就一笔带过了</strong></p></blockquote></blockquote><hr><blockquote><p><strong>接下来我们来看n=2的时候的运行情况</strong></p></blockquote><hr><blockquote><p><img src="https://img1.imgtp.com/2023/08/27/UMrA2XCP.gif" alt="n=2"></p></blockquote><blockquote><p>由图中我们可以看出当A柱的总盘子数大于1的时候，要使从盘子原封不动从A柱移动到C柱子。且大盘子只能在小盘子下面，那我们只能先把上面的小盘子先暂时存到B柱作为过渡，然后我们就可以把A柱上的最大的盘子移动到C柱子，最后把B柱子上的小盘子移动到C柱子就可以了。我们通过总结这段运行过程可以发现：我们只要将n-1个盘子，(n代表最底下的盘子),一次性移动到B柱子上进行过渡，然后第n个盘子移动到C柱子就可以了，然后再把B柱上的盘子整体移动到C柱子就可以完成了。<strong>用更精简的语言来描述就是：先A-&gt;B，然后A-&gt;C，最后B-&gt;C</strong></p></blockquote><hr><blockquote><p>我们再来看一个n=3的运行图</p></blockquote><hr><blockquote><p><img src="https://img1.imgtp.com/2023/08/27/7RenKV1D.gif" alt="n=3"></p></blockquote><hr><blockquote><p>怎么样？看完了n=3的动图演示，是不是感觉一脸懵逼？？？(反正我昨天是这样的qwq)。话不多说，我就来一步一步拆解一下n=3的运行机理。在这之前呢，我们要明确一下我们在n=2的时候得出的结论：<strong>先A-&gt;B，然后A-&gt;C，最后B-&gt;C。这个法则将贯穿全文，无论n的值为多少</strong></p></blockquote><hr><h3><span id="yuan-li-fen-xi">原理分析</span><a href="#yuan-li-fen-xi" class="header-anchor">#</a></h3><p><strong>这里我提前说明一下，我定义最左边的柱子为A，中间的柱子为B，最右边的柱子为C</strong></p><h4><span id="di-yi-bu-chai-jie">第一步拆解</span><a href="#di-yi-bu-chai-jie" class="header-anchor">#</a></h4><blockquote><p>我们知道n=2的时候，程序的运行步骤是先从A-&gt;B将(n-1)部分的盘子移动到B柱寄存，然后执行A-&gt;C，将最底下标号为n的盘子移动到C，最后执行B-&gt;C将寄存在B柱子的(n-1)个柱子移动到C柱子。那我们分析n=3的时候我们就可以将下图蓝色盘子上方的盘子（图中阴影部分）抽象成一个整体，那我们要求的n=3，3个盘子的转移问题就变成了n=2转移两个盘子的问题。</p></blockquote><p><img src="https://img1.imgtp.com/2023/08/27/o63KqaR9.png" alt="@抽象前 "><br><img src="https://img1.imgtp.com/2023/08/27/Ks1MaTNd.png" alt="@抽象后"></p><blockquote><p>接下来我们将抽象后的盘子进行转移，按照n=2的转移办法，粉色的盘子会被投放到B柱子上，然后蓝色的盘子将会被投放到C柱子上。(状态图如下图)<br><img src="https://img1.imgtp.com/2023/08/27/AVIQpxBA.png" alt="@状态图"><br>到了这个状态之后，按照转移的顺序，我们应该把粉色的盘子转移到C柱就可以完成任务了。但是！我们这个粉色的盘子是我们抽象出来的，它内部还有俩盘子呢：所以我们要对着两个盘子再次进行分析。</p><blockquote><p><img src="https://img1.imgtp.com/2023/08/27/mB8iVUkq.png" alt="@粉色盒子内部"></p></blockquote></blockquote><h4><span id="di-er-bu-chai-jie">第二步拆解</span><a href="#di-er-bu-chai-jie" class="header-anchor">#</a></h4><blockquote><p><strong>由于第一步我们是将蓝色盘子上方的两个盘子抽象成了一个，我们程序执行的时候可不能整体移动，所以我们要对这个粉色的整体盘子再次进行拆解，根据第一步拆解的最后步骤我们可以看到，我们第二步拆解的时候，粉色盘子是位于B柱子的时候进来的，那个视角的参照物我们是基于粉色和蓝色盘子的视角(主视角)来看的。所以从那个视角来看，我们的粉色盘子是从B柱子进入第二步拆解。既然我们进入了第二步拆解，我们的视角参照物应该切换成基于黄色和绿色盘子的视角(次视角)，我们要从这个视角来重复执行A-&gt;B,A-&gt;C，B-&gt;C的步骤，但是这里要注意，我们最终的观察角度是通过主视角来看的，于是主视角所看到的B柱子其实对应的是次视角的C柱子：因为我们是从主视角的B柱子进入的次视角，在次视角中最后是要将盘子从A-&gt;C，随后返回给主视角，所以说次视角的C相当于主视角的B柱子，次视角的B相当于主视角的C柱子。接下来我们通过图片来加深一下理解</strong><br>如下图。<br><img src="https://img1.imgtp.com/2023/08/27/TMGmviqi.png" alt="@二次拆解后，次视角"><br>接下来我们来看一下次视角状态下盘子移动后的A-&gt;B，A-&gt;C的中间结果<br><img src="https://img1.imgtp.com/2023/08/27/ejF9lz1G.gif" alt="@次视角中进行移动的中间结果图"><br>那我们的主视角是什么样的情况呢，接下来我们来看一下次视角对应的主视角盘子移动情况<br><img src="https://img1.imgtp.com/2023/08/27/TrZMAKdX.gif" alt="@主视角中进行移动的中间结果图"></p></blockquote><blockquote><p><strong>看到这里我们相信你就明白了吧，每一次对抽象盘子进行拆解的时候，它们都会进入以抽象盘子为基础的次视角，但是我们从外部来看到的应该是没有拆解前的主视角的移动情况。所以啊，我们再看看一遍n=3的时候的运行图，来加强一下理解。我觉得最难的点在于我们人总是会惯性地从我们的主视角去看，而每一次拆解进入的时候是抽象盘子的次视角在执行A-&gt;B,A-&gt;C，B-&gt;C的迁移动作。这导致了我们看的很懵逼，越看越难理解。</strong><br><img src="https://img1.imgtp.com/2023/08/27/7RenKV1D.gif" alt="n=3"></p></blockquote><p>好了，思路到这里我们点到为止，大致的运行思路就是这样，关键在于主次视角的切换的理解，接下来我们将为什么用递归来实现汉诺塔</p><h2><span id="wei-shi-me-yong-di-gui-suan-fa-shi-xian">为什么用递归算法实现？</span><a href="#wei-shi-me-yong-di-gui-suan-fa-shi-xian" class="header-anchor">#</a></h2><blockquote><p>要解决这个疑问呢，我们首先要搞明白，汉诺塔的盘子的迁移特性和递归的特性，它们两者之间的有没有共通性才是我们选择递归来实现汉诺塔的关键。那下面我来分析一下，看看它们之间是不是真的有共通点</p></blockquote><blockquote><p>汉诺塔盘子的迁移特性</p><blockquote><p>我们通过对两个以上的盘子进行抽象，让我们把要解决的问题转换成一个个n=2的盘子迁移问题，直到n=1为止。比如我们总的n=3，那我们第一步就要把三个盘子中的两个抽象成1个，保留最底下的那个盘子。这样我们要解决的问题又变成了解决n=2的盘子迁移问题。换句话来我们将复杂的问题，通过层层外包进行了分布化处理</p></blockquote></blockquote><blockquote><p>递归的特性</p><blockquote><p>递归可以类比成公司领导下发秘密任务，通过层层下属的反馈最后达到完成任务的目的。假如老板A准备发了一则秘密任务“test”，于是老板把他的亲信”B”高管叫过来了，说你去帮我完成，完成后给予他反馈。然后”B”高管肯定也不会自己干的，于是它就把任务告诉了他的亲信”C“，让C完成之后给予反馈。</p></blockquote></blockquote><blockquote><p>怎么样？看了汉诺塔的迁移特性和递归的特性，有没有发现他们其实都是在通过层层外包，最后将问题转换成最简单的问题再去解决。最后达到将复杂的问题简单化的目标。所以我们完全可以使用递归算法去实现汉诺塔问题！！</p></blockquote><h2><span id="dai-ma-shi-xian">代码实现</span><a href="#dai-ma-shi-xian" class="header-anchor">#</a></h2><blockquote><p>知道了为什么能用递归算法实现汉诺塔问题，接下来我们就来感受一下在代码下的汉诺塔实现，这里我给出两个版本，一个是python版本，一个是c++版本。</p></blockquote><hr><blockquote><p>c++版本</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">char</span> z<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//x，y，z分别代表A,B,C柱子</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span>       cout<span class="token operator">&lt;&lt;</span><span class="token string">"#"</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">"->"</span><span class="token operator">&lt;&lt;</span>z<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A->C</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当n=1，也就是只有一个盘子的时候我们直接把盘子丢给C柱子即可</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//否则我们就要进入else语句，通过不断的抽象化盘子，去简化问题</span>        <span class="token function">hanoi</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象化盘子将A->B柱子</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"#"</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">"->"</span><span class="token operator">&lt;&lt;</span>z<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行完抽象化的盘子之后，这里我们是将最底下的那个盘子直接移动到C柱子上</span>        <span class="token function">hanoi</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最底下的盘子我们已经在上面移动到了C柱子，接下来我们把暂存在B柱子的盘子移动到C柱子就好了，这段代码就是实现这个功能B->C柱子</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当我们执行抽象化盘子从B柱子-&gt;柱子C的时候</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">hanoi</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最底下的盘子我们已经在上面移动到了C柱子，接下来我们把暂存在B柱子的盘子移动到C柱子就好了，这段代码就是实现这个功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序通过递归下一次会进入A-&gt;B柱的代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">hanoi</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象化盘子将A->B柱子</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**发现没有？这里有一个主次视角的转换。我来举个例子好了比如我们先执行hanoi(y,x,z,n-1); 这里y=B,x=A，z=C，代入可以得到hanoi(B,A,C,n-1);，接着执行hanoi(x,z,y,n-1); 这里我们将刚刚函数读入的x，y，z对应填入这个函数，可以得到hanoi(A,,C,B,n-1); 文字有点不好描述，请看下面的动图演示：(还是以n=3进入n=2的数据作为例子)</p><p><img src="https://img1.imgtp.com/2023/08/28/RUvp66U4.gif" alt="n=3进入n=2,n=2的视角"></p><p>所以我们从n=3的主视角看到的就是如下的运动情况：</p><p><img src="https://img1.imgtp.com/2023/08/27/7RenKV1D.gif" alt="n=3的主视角运动情况"></p><p><strong>看到没有！！主视角的黄色盘子第一步移动就去了C盘子，C盘子就对应了次视角的B盘子</strong></p></blockquote><hr><blockquote><p>Python版本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"--->"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">//</span>解决当盘子只剩一个的时候的迁移问题    <span class="token keyword">else</span><span class="token punctuation">:</span>        move<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">//</span>将抽象化的盘子从A<span class="token operator">-</span><span class="token operator">></span>B        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"--->"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">//</span>把最底下的盘子从A<span class="token operator">-</span><span class="token operator">></span>C柱子        move<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">//</span>把抽象的盘子从B<span class="token operator">-</span><span class="token operator">></span>C柱子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2><span id="xie-zai-zui-hou">写在最后</span><a href="#xie-zai-zui-hou" class="header-anchor">#</a></h2><blockquote><p>我只能说汉诺塔这个问题，如果单纯告诉程序去运行思路，那看起来是挺简单的，但是深入思考它内部的运行原理是挺抽象的，因为里面涉及了主次视角的转变，而我们又总是以主视角去观察盘子移动的，这就让人感觉产生了汉诺塔运行起来毫无规律的误解。以上就是我对汉诺塔的个人理解。本人水平有限。如果理解错了，请见谅，欢迎指正。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表题实战</title>
      <link href="/2023/08/25/%E9%93%BE%E8%A1%A8%E5%AE%9E%E6%88%98/"/>
      <url>/2023/08/25/%E9%93%BE%E8%A1%A8%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1><span id="lian-biao-shi-zhan">链表实战</span><a href="#lian-biao-shi-zhan" class="header-anchor">#</a></h1><h2><span id="ti-mu-miao-shu">题目描述</span><a href="#ti-mu-miao-shu" class="header-anchor">#</a></h2><blockquote><p>有 n 辆自行车依次来到停车棚，除了第一辆自行车外，每辆自行车都会恰好停放在已经在停车棚里的某辆自行车的左边或右边。(e.g.停车棚里已经有 3 辆自行车，从左到右编号为:3,5,1。现在编号为 2 的第 4 辆自行车要停在 5 号自行车的左边，所以现在停车棚里的自行车编号是：3，2，5，1）。给定n辆自行车的停放情况，按顺序输出最后停车棚里的自行车编号。n≤100000。</p></blockquote><blockquote><p><strong>输入描述</strong></p><blockquote><p>第一行一个整数 n。 第二行一个整数x。表示第一辆自行车的编号。 以下 n−1 行，每行<br>3 个整数 x,y,z。 z=0 时，表示编号为 x 的自行车恰停放在编号为 y 的自行车的左边。 z=1 时，表示编号为 x 的自行车恰停放在编号为 y 的自行车的右边。</p></blockquote></blockquote><blockquote><p><strong>输出描述</strong></p><blockquote><p>从左到右输出停车棚里的自行车编号</p></blockquote></blockquote><blockquote><p><strong>输入样例</strong></p><blockquote><pre><code>        4    3  1 3 1  2 1 0  5 2 1</code></pre></blockquote></blockquote><blockquote><p><strong>输出样例</strong></p><blockquote><pre><code>3 2 5 1</code></pre></blockquote></blockquote><h2><span id="si-lu">思路</span><a href="#si-lu" class="header-anchor">#</a></h2><h3><span id="jing-tai-lian-biao-shi-xian-si-lu">静态链表实现思路</span><a href="#jing-tai-lian-biao-shi-xian-si-lu" class="header-anchor">#</a></h3><blockquote><p><strong>①：先初始化下标为0,1的链表结点。</strong><br><strong>如图</strong>   <img src="https://img1.imgtp.com/2023/08/25/BsOFIdEf.jpg" alt="初始化示意图"></p></blockquote><blockquote><p><strong>②：接下来我们从下标为2的链表结点开始，先将第一辆自行车插入结点0和结点1之间。之后保持结点0，1不动，结点0，1仅仅用于判别左右方向边界。</strong><br><img src="https://img1.imgtp.com/2023/08/25/hldOBjyF.jpg" alt="链表插入示意图"><br><strong>③：由于链表在插入的时候需要一个一个遍历过去，它的时间复杂度是O(n)，n题目说是≤100000 。当n过大时，容易引起程序运行超时。所以我们引进一个located[N]定位数组，用于定位每个自行车的位置。这样我们就可以根据自行车的名字直接定位到其结点位置进行插入操作，无需进行遍历查找。</strong><br><strong>④：结合以上三点，我们就可以实现对本题的代码实现</strong></p></blockquote><h2><span id="he-xin-dai-ma">核心代码</span><a href="#he-xin-dai-ma" class="header-anchor">#</a></h2><blockquote><p>创建链表</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>  <span class="token keyword">int</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储上一个结点</span>  <span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储下一个结点</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储自行车的编号</span><span class="token punctuation">}</span>Node<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建一个locate数组用于存储自行车摆放的结点位置，便于快速定位</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> locate<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>编写一个初始化函数，设置链表结点0，1作为左右方向的边界</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> Node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   Node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   now<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对应本文上面思路段落的第一张图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>编写插入数据的自定义函数，用图片来描述的话，就是对应本文思路部分的第二张图片，本节的代码部分理解最好对着图片去模拟，那样会好理解一点。</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//变量k是提供位置信息，例如x要插入到y的左边，那这个k就代表了y的位置信息。而变量a则提供新插入的自行车的编号</span><span class="token punctuation">{</span> Node<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将新自行车的编号插入新结点的数据部分</span> locate<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>now<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将新的自行车结点的下标存储在locate数组，便于快速查找</span> Node<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token operator">=</span>Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将新结点的N（next）指向新结点右边的结点</span> Node<span class="token punctuation">[</span>Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">=</span>now<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将刚刚新节点的N指向的右边结点重新指回新结点，以构成双向链表，方便结点左右方向的任意插入</span> Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token operator">=</span>now<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将属于新节点左边的结点指向新结点</span> Node<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新节点的P（preid）指向其左结点。</span> now<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结点位置+1，便于下一个新结点的创建。</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这个代码需要结合思路部分的第二张图片去理解更佳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>对于左右插入顺序的执行，在插入函数中最后的实现其实是偏右边的，比如k=0，那我们新的结点插入的位置是在0结点的右边的。右边插入我们解决了，接下来我们按照相对性的普遍规律，我们输入k=-1结点(这只是假设，假设0结点前面有一个-1结点)，那结点就会插入到-1结点的右边，这不就相当于在结点0的左边嘛。这样我们左边插入和右边插入的问题就迎刃而解了</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">insert</span><span class="token punctuation">(</span>Node<span class="token punctuation">[</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入到y的左边</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>       <span class="token punctuation">{</span>           <span class="token function">insert</span><span class="token punctuation">(</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入到y的右边</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="yuan-dai-ma">源代码</span><a href="#yuan-dai-ma" class="header-anchor">#</a></h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">120000</span><span class="token punctuation">;</span><span class="token keyword">int</span> now<span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>  <span class="token keyword">int</span> p<span class="token punctuation">;</span>  <span class="token keyword">int</span> N<span class="token punctuation">;</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span>Node<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> locate<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> Node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   Node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   now<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span> Node<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">=</span>a<span class="token punctuation">;</span> locate<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>now<span class="token punctuation">;</span> Node<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token operator">=</span>Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">;</span> Node<span class="token punctuation">[</span>Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">=</span>now<span class="token punctuation">;</span> Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token operator">=</span>now<span class="token punctuation">;</span> Node<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">=</span>k<span class="token punctuation">;</span> now<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token punctuation">;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将第一辆自行车插入数据</span>  n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一辆插入了之后总数量要减1</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token operator">>></span>z<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">insert</span><span class="token punctuation">(</span>Node<span class="token punctuation">[</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>       <span class="token punctuation">{</span>           <span class="token function">insert</span><span class="token punctuation">(</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>Node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>Node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span>     <span class="token punctuation">{</span>       cout<span class="token operator">&lt;&lt;</span>Node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将结点的数据依次输出</span>     <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="c-stl-lian-biao-rong-qi-shi-xian-yuan-dai-ma">C++STL 链表容器实现源代码</span><a href="#c-stl-lian-biao-rong-qi-shi-xian-yuan-dai-ma" class="header-anchor">#</a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>a<span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator locate<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于定位自行车对应的结点位置</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Node<span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//迭代器，只访问物体的外部信息，而不访问内部信息，可以看作指针，指针是迭代器的一种</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a是第一类自行车的编号，n是总共的自行车数量</span>    Node<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将第一辆自行车的数据存入链表结点</span>    locate<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>Node<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将第一辆自行车的结点的位置信息存到locate 迭代器中，因为list容器访问的时候只能通过自增去一个一个查询，而不可以直接通过下标去访问。那样太慢了，我们直接通过存自行车编号对应的迭代器，可以直接定位到具体的结点位置，提高运行效率</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token operator">>></span>z<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>  Node<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将编号x的自行车插到y编号自行车的左边</span>            temp<span class="token operator">=</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//存储y编号自行车的位置</span>            locate<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">--</span>temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//temp位置是对应y自行车的，现在x编号的自行车已经在y自行车的前面了，所以只要将temp自减1，就是x对应的位置信息了</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span> Node<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">++</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将编号x的自行车插到y编号自行车的右边</span>            temp<span class="token operator">=</span>locate<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            locate<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">--</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    temp<span class="token operator">=</span>Node<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>temp<span class="token punctuation">;</span>temp<span class="token operator">!=</span>Node<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>temp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过迭代器遍历输出结果</span>  <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>temp<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><blockquote><p><strong>通过一locate数组/list迭代器 来存储位置信息，通过空间换时间可以用来解决链表遍历过慢的问题。本题核心的点在于利用双向链表，通过物体相对的位置关系去实现了左边插入和右边插入。</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数求阶乘/相加问题</title>
      <link href="/2023/08/23/%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/23/%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1><span id="da-shu-qiu-jie-cheng-xiang-jia-wen-ti">大数求阶乘/相加问题</span><a href="#da-shu-qiu-jie-cheng-xiang-jia-wen-ti" class="header-anchor">#</a></h1><h2><span id="da-shu-qiu-jie-cheng">大数求阶乘</span><a href="#da-shu-qiu-jie-cheng" class="header-anchor">#</a></h2><h3><span id="ti-mu-miao-shu">题目描述</span><a href="#ti-mu-miao-shu" class="header-anchor">#</a></h3><blockquote><p>题目描述<br>给定一个正整数 n，求出 n! 的值。<br><strong>输入描述</strong></p></blockquote><blockquote><p>输入一个正整数 n，n&lt;=1000。</p></blockquote><blockquote><p><strong>输出描述</strong><br>输出 n! 。<br><strong>输入输出样例</strong></p><blockquote><p>示例<br>输入</p></blockquote><blockquote><blockquote><pre><code>10</code></pre></blockquote></blockquote></blockquote><blockquote><blockquote><p>输出</p><blockquote><pre><code>3628800</code></pre></blockquote></blockquote></blockquote><h3><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">#</a></h3><blockquote><p>刚看到这道题目的时候，我的内心：什么？？求阶乘？？？这个简单，写一个采用递归的方法，递归不就完事了嘛。一分钟以后，我毫不犹豫点击提交，一看，就通过了俩测试点 (大哭.jpg)。既然出了问题，那就得先找出是什么原因导致的，题目说n&lt;=1000。那我就拿n=1000去测试一下程序，一看数据结果是鸭蛋(0)。到这里基本上问题就明朗了，当n越来越大的时候，前几个小的数还可以正常输出，后面的大的数据所计算出来的阶乘值已经超过了定义的int类型的最大范围，导致结果溢出。n=1000的时候即使是long long 类型的数据类型也无法承受它的结果值。好家伙，突然感觉路就被堵死了，这咋办？既然问题是大的数据溢出造成的，那我们干脆就把这个大的数据存放进数组里面，这样就可以保证数据不溢出了。那新的问题又来了，这个大数被我们存进数组了，那我们怎么让它跟下一个数据进行相乘呢？？？？好在天无绝人之路，小学学的竖式相乘的法则可以帮我们完美解决这个问题。接下来我们来介绍一下这个竖式相乘法则：</p><blockquote><p>直接放例子:  12×39916878</p></blockquote></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">         <span class="token number">12</span>   <span class="token number">39916878</span>       <span class="token comment" spellcheck="true">//第一步先将两个数对应的位数对齐(个位对个位，十位对十位......)</span>         <span class="token number">96</span>      <span class="token comment" spellcheck="true">//第二步接下来我们让大数的个位数8去乘12,可得到96</span>        <span class="token number">84</span>      <span class="token comment" spellcheck="true">//同理我们让大数的十位上的数7去乘12,可得到84</span>       <span class="token number">96</span>      <span class="token comment" spellcheck="true">//百位上的数也同理</span>      <span class="token number">72</span>      <span class="token comment" spellcheck="true">//千位上的数也同理</span>     <span class="token number">12</span>      <span class="token comment" spellcheck="true">//万位上的数也同理</span>   <span class="token number">108</span>      <span class="token comment" spellcheck="true">//十万位上的数也同理</span>  <span class="token number">108</span>      <span class="token comment" spellcheck="true">//百万位位上的数也同理</span>  <span class="token number">36</span>      <span class="token comment" spellcheck="true">//千万位上的数也同理</span>  <span class="token number">479002536</span>        <span class="token comment" spellcheck="true">//最后我们依次把这些数相加存入数组就可以得到结果了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这个竖式相乘法则就是解决我们本题的关键，看了上面的这个例子，相信你心中应该已经有点灵感了吧？？如果没有也没关系，接下来我们用程序语言来实现这个算法</strong></p></blockquote><hr><blockquote><p> <strong>首先我们要初始化一个数组，记作Big_data;同时初始化当前数据每个位数上的数字，这里我们为了直观一点，将大数的个位数设置在数组下标1的位置，十位、百位…..则对应数组下标2、3……</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">int</span> Big_data<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token keyword">int</span> n，i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n用于所需阶乘的数据输入，i和j是为了下面的数据遍历</span> cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>接下来我们要进行第二步：将依次递增上去的较小数与大数的各个位进行相乘，将各个位数的结果存储在位数对应的数组中</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>last<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个操作是让每个 位数产生的乘积先临时存入数组中，以上面的数据为例子，个位数产生的乘积96将被存入数组下标1中，下标2将存入十位上产生的乘积84，以此类推。</span>        <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第三步：每个位置上的乘积我们已经储存好了，接下来我们就要对这些存储好的数组数据进行相加处理了</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>last<span class="token operator">||</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里的Big_data[j]!=0是为了让两数相乘之后的最高位上的数据能够更新,本来我们相乘之前那个大数是个8位数，那我们j能遍历到的最高位也就是八，如果相乘的数结果是个9位数的话，那最高位就没办法添加进我们的最高位数组，所以这个Big_data[j]!=0就是为了当j==9的时候如果Big_data[9]不是0的话，说明新的大数是有九位数的，所以我们要进入这个条件，把第九位数据更新进Big_data数组</span><span class="token punctuation">{</span> Big_data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Big_data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以上面的个位和十位数举例子就是让96中的9和84去相加</span>  Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新大数每个位置上的数据，以上面的例子的个位数就是96的9已经加进84了，剩下的6就是我们个位数上剩的值了，那我们把6添加进Big_data[1]，作为我们的个位。</span> <span class="token punctuation">}</span> last<span class="token operator">=</span>j<span class="token number">-1</span><span class="token comment" spellcheck="true">//更新这个大数的最高位数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>到这里数据已经被我们处理完成了，此时Big_data数组中下标1-last中已经存了我们这个大数的各个位数的数值，我们只要全部把他们输出了就可以得到我们这个大数的值了。</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>last<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   cout<span class="token operator">&lt;&lt;</span>Big_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//依次输出大数各个位数上的值</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="yuan-dai-ma">源代码</span><a href="#yuan-dai-ma" class="header-anchor">#</a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> last<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">int</span> Big_data<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>last<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>last<span class="token operator">||</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> Big_data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Big_data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>          Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Big_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        last<span class="token operator">=</span>j<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>last<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>Big_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//依次输出大数各个位数上的值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="da-shu-xiang-jia-wen-ti">大数相加问题</span><a href="#da-shu-xiang-jia-wen-ti" class="header-anchor">#</a></h2><h3><span id="ti-mu-miao-shu">题目描述</span><a href="#ti-mu-miao-shu" class="header-anchor">#</a></h3><blockquote><p>输入两个整数 a 和 b，输出这两个整数的和。a 和 b 都不超过 100 位</p></blockquote><h3><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">#</a></h3><blockquote><p>本题解题的原理与上面的竖式乘法原理类似，让程序模拟竖式加法去运算即可。下面我来简单介绍一下竖式加分：</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token number">89789</span><span class="token operator">+</span> <span class="token number">78979</span>     <span class="token number">18</span>    <span class="token number">15</span>   <span class="token number">16</span>  <span class="token number">17</span> <span class="token number">15</span><span class="token operator">=</span><span class="token number">168768</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一题求大数阶乘的时候我们是从1开始逐次乘上去的，所以我们可以选择让个位数从数组的 下标1开始，而本题是直接通过输入两个大数，如果采用整数数组法，还需要去确认输入数据的位数，操作起来比较麻烦。所以本题我们代码部分采用另外一种字符串写法去执行：</p></blockquote><hr><blockquote><p><strong>首先我们先定义输入a,b，以及相加结果add_result的类型为字符串</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">string add_result<span class="token punctuation">;</span> string a <span class="token punctuation">,</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>接下来我们同样地从a，b两个字符串的末尾(大数的个位数)开始执行竖式加法原则，由于我们数据类型是字符类型的，所以数据的各个位数上对应的字符就要合理加减字符’0’去间接地转成整数，才可以让对应各个位数进行相加。我在源代码中引进了int c 整型变量用来临时存储位数相加之后的数据。然后我们可以通过对变量c的取余与字符’0’相加，我们就可以使各个位数上的结果还原成字符类型了。这样我们就可以解决字符之间相加的难题了。</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">||</span>c<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从后往前遍历，相当于从个位数开始依次往前遍历，c!=0也是为了如果最高位有进位值的话，要更新最高位的数据</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果a上面的位数有数据，则将该字符与字符'0'相减，得到差值（字符间接转整数），方便两个大数位数之间的相加</span>    c<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果b上面的位数有数据，则将该字符与字符'0'相减，得到差值，（字符间接转整数），方便两个大数位数之间的相加</span>    c<span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    add_result<span class="token operator">+</span><span class="token operator">=</span>c<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将相加后的得出的位数结果值还原成字符类型</span>    c<span class="token operator">=</span>c<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 进位值，加入到下一位的数据相加之中去</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>到这里我们add_result存储的结果其实是从个位开始然后到高位的，所以我们输出的时候要把这个字符串翻转一下再输出</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">reverse</span><span class="token punctuation">(</span>add_result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>add_result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将字符串add_result翻转过来</span> cout<span class="token operator">&lt;&lt;</span>add_result<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> string add_result<span class="token punctuation">;</span> string a <span class="token punctuation">,</span>b<span class="token punctuation">;</span> <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">||</span>c<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>    c<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>    c<span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    add_result<span class="token operator">+</span><span class="token operator">=</span>c<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span>    c<span class="token operator">=</span>c<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">reverse</span><span class="token punctuation">(</span>add_result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>add_result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cout<span class="token operator">&lt;&lt;</span>add_result<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><blockquote><p><strong>这两道题目虽然代码的处理方式不一样，但是他们的原理都是基于竖着乘法(加法)法则来运行的，无论是加法还是乘法，我们都是要从个位开始操作，第一题求阶乘的时候我们是从1开始逐次乘上去的，相当于就是从个位数开始的，所以我们可以利用数组来从左向右依次存储大数的低位到高位的数据情况。最后输出的时候将各个位数数据反过来输出即可。而第二题两个大数相加，由于他们是通过键盘输入进来的数据，输入进来的位数从高到低是依次从左向右排列的。但是我们相加的过程毕竟还是要从个位数开始执行的，我们还要去确定两个大数的个位数的位置下标，比较繁琐。所以我们换了一种思路，通过将两个数定义成字符串类型，通过字符串的size()方法名，找到字符串的长度，然后从后往前遍历，且通过加减字符’0’，来间接实现对字符数据之间的相加减。最后将结果字符串翻转输出即可。</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 大数运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯小题杂记</title>
      <link href="/2023/08/22/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%B0%8F%E9%A2%98%E6%9D%82%E8%AE%B0/"/>
      <url>/2023/08/22/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%B0%8F%E9%A2%98%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="lan-qiao-bei-xiao-ti-za-ji">蓝桥杯小题杂记</span><a href="#lan-qiao-bei-xiao-ti-za-ji" class="header-anchor">#</a></h1><h2><span id="ti-mu">题目①</span><a href="#ti-mu" class="header-anchor">#</a></h2><h3><span id="ti-mu-miao-shu">题目描述</span><a href="#ti-mu-miao-shu" class="header-anchor">#</a></h3><blockquote><p>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。<br>如下的 10行数据，每行有 10 个整数，请你求出它们的乘积的末尾有多少个零？</p><p><strong>5650 4542 3554 473 946 4114 3871 9073 90 4329<br>2758 7949 6113 5659 5245 7432 3051 4434 6704 3594<br>9937 1173 6866 3397 4759 7557 3070 2287 1453 9899<br>1486 5722 3135 1170 4014 5510 5120 729 2880 9019<br>2049 698 4582 4346 4427 646 9742 7340 1230 7683<br>5693 7015 6887 7381 4172 4341 2909 2027 7355 5649<br>6701 6645 1671 5978 2704 9926 295 3125 3878 6785<br>2066 4247 4800 1578 6652 4616 1113 6205 3264 2915<br>3966 5291 2904 1285 2193 1428 2265 8730 9436 7074<br>689 5510 8243 6114 337 4096 8199 7313 3685 211</strong></p></blockquote><h3><span id="si-lu">思路</span><a href="#si-lu" class="header-anchor">#</a></h3><blockquote><p>题目说要求这100个数据的乘积有多少个零，如果我们直接将这些数据相乘，那将会是一个天文数字，肯定会超出数据类型的最大值。那怎么办？一种显而易见的方式是：分而治。首先：先将摆在明面上的数据有零的先提早进行计数，计数完之后将数据记完数的含零部分进行剔除。所有数据按照这种思路执行，直到遍历完成。 其次：根据两数相乘的法则，同时图中数据最大的位数是4位数，我们还可以在去除完多余的0数据之后只保留该数据（被乘数）的最后四位。因为乘数最大是四位数，与被乘数的有效乘积其实只有四位，所以我们完全可以去除该数据（被乘数）的冗余位数。至此我们就实现了在保证数据不超出类型的最大值的情况下完成了对总乘积值的零数据的计数。</p></blockquote><h3><span id="yuan-dai-ma">源代码</span><a href="#yuan-dai-ma" class="header-anchor">#</a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化全局计数变量count</span><span class="token keyword">int</span> <span class="token function">DivideZero</span><span class="token punctuation">(</span><span class="token keyword">int</span>  i<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历数据的每一个位数</span>    <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果该位是0，则计数+1</span>    <span class="token punctuation">{</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//如果该位数不是0，则直接返回这个数的值</span>     <span class="token keyword">return</span> i<span class="token punctuation">;</span>        i<span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除判断完的位数</span>    <span class="token punctuation">}</span>      <span class="token keyword">return</span>  i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果这个位数除了最高位之外都是0，只剩该最高位，则返回这个最高位的值</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token number">5650</span><span class="token punctuation">,</span><span class="token number">4542</span><span class="token punctuation">,</span><span class="token number">3554</span><span class="token punctuation">,</span><span class="token number">473</span><span class="token punctuation">,</span><span class="token number">946</span><span class="token punctuation">,</span><span class="token number">4114</span><span class="token punctuation">,</span><span class="token number">3871</span><span class="token punctuation">,</span><span class="token number">9073</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">4329</span><span class="token punctuation">,</span>   <span class="token number">2758</span><span class="token punctuation">,</span><span class="token number">7949</span><span class="token punctuation">,</span><span class="token number">6113</span><span class="token punctuation">,</span><span class="token number">5659</span><span class="token punctuation">,</span><span class="token number">5245</span><span class="token punctuation">,</span><span class="token number">7432</span><span class="token punctuation">,</span><span class="token number">3051</span><span class="token punctuation">,</span><span class="token number">4434</span><span class="token punctuation">,</span><span class="token number">6704</span><span class="token punctuation">,</span><span class="token number">3594</span><span class="token punctuation">,</span>   <span class="token number">9937</span><span class="token punctuation">,</span><span class="token number">1173</span><span class="token punctuation">,</span><span class="token number">6866</span><span class="token punctuation">,</span><span class="token number">3397</span><span class="token punctuation">,</span><span class="token number">4759</span><span class="token punctuation">,</span><span class="token number">7557</span><span class="token punctuation">,</span><span class="token number">3070</span><span class="token punctuation">,</span><span class="token number">2287</span><span class="token punctuation">,</span><span class="token number">1453</span><span class="token punctuation">,</span><span class="token number">9899</span><span class="token punctuation">,</span>   <span class="token number">1486</span><span class="token punctuation">,</span><span class="token number">5722</span><span class="token punctuation">,</span><span class="token number">3135</span><span class="token punctuation">,</span><span class="token number">1170</span><span class="token punctuation">,</span><span class="token number">4014</span><span class="token punctuation">,</span><span class="token number">5510</span><span class="token punctuation">,</span><span class="token number">5120</span><span class="token punctuation">,</span><span class="token number">729</span><span class="token punctuation">,</span><span class="token number">2880</span><span class="token punctuation">,</span><span class="token number">9019</span><span class="token punctuation">,</span>   <span class="token number">2049</span><span class="token punctuation">,</span><span class="token number">698</span><span class="token punctuation">,</span><span class="token number">4582</span><span class="token punctuation">,</span><span class="token number">4346</span><span class="token punctuation">,</span><span class="token number">4427</span><span class="token punctuation">,</span><span class="token number">646</span><span class="token punctuation">,</span><span class="token number">9742</span><span class="token punctuation">,</span><span class="token number">7340</span><span class="token punctuation">,</span><span class="token number">1230</span><span class="token punctuation">,</span><span class="token number">7683</span><span class="token punctuation">,</span>   <span class="token number">5693</span><span class="token punctuation">,</span><span class="token number">7015</span><span class="token punctuation">,</span><span class="token number">6887</span><span class="token punctuation">,</span><span class="token number">7381</span><span class="token punctuation">,</span><span class="token number">4172</span><span class="token punctuation">,</span><span class="token number">4341</span><span class="token punctuation">,</span><span class="token number">2909</span><span class="token punctuation">,</span><span class="token number">2027</span><span class="token punctuation">,</span><span class="token number">7355</span><span class="token punctuation">,</span><span class="token number">5649</span><span class="token punctuation">,</span>   <span class="token number">6701</span><span class="token punctuation">,</span><span class="token number">6645</span><span class="token punctuation">,</span><span class="token number">1671</span><span class="token punctuation">,</span><span class="token number">5978</span><span class="token punctuation">,</span><span class="token number">2704</span><span class="token punctuation">,</span><span class="token number">9926</span><span class="token punctuation">,</span><span class="token number">295</span><span class="token punctuation">,</span><span class="token number">3125</span><span class="token punctuation">,</span><span class="token number">3878</span><span class="token punctuation">,</span><span class="token number">6785</span><span class="token punctuation">,</span>   <span class="token number">2066</span><span class="token punctuation">,</span><span class="token number">4247</span><span class="token punctuation">,</span><span class="token number">4800</span><span class="token punctuation">,</span><span class="token number">1578</span><span class="token punctuation">,</span><span class="token number">6652</span><span class="token punctuation">,</span><span class="token number">4616</span><span class="token punctuation">,</span><span class="token number">1113</span><span class="token punctuation">,</span><span class="token number">6205</span><span class="token punctuation">,</span><span class="token number">3264</span><span class="token punctuation">,</span><span class="token number">2915</span><span class="token punctuation">,</span>   <span class="token number">3966</span><span class="token punctuation">,</span><span class="token number">5291</span><span class="token punctuation">,</span><span class="token number">2904</span><span class="token punctuation">,</span><span class="token number">1285</span><span class="token punctuation">,</span><span class="token number">2193</span><span class="token punctuation">,</span><span class="token number">1428</span><span class="token punctuation">,</span><span class="token number">2265</span><span class="token punctuation">,</span><span class="token number">8730</span><span class="token punctuation">,</span><span class="token number">9436</span><span class="token punctuation">,</span><span class="token number">7074</span><span class="token punctuation">,</span>   <span class="token number">689</span><span class="token punctuation">,</span><span class="token number">5510</span><span class="token punctuation">,</span><span class="token number">8243</span><span class="token punctuation">,</span><span class="token number">6114</span><span class="token punctuation">,</span><span class="token number">337</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">8199</span><span class="token punctuation">,</span><span class="token number">7313</span><span class="token punctuation">,</span><span class="token number">3685</span><span class="token punctuation">,</span><span class="token number">211</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  temp<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//temp临时存储第一个数据，方便用于与后面的数据进行相乘</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>  temp<span class="token operator">*</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前后数据进行相乘</span>   temp<span class="token operator">=</span><span class="token function">DivideZero</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除数据某位的连续的"0"</span>   temp<span class="token operator">=</span>temp<span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//保留数据的后四位，不干扰求末尾0数据总数的同时缩小数据的大小</span>   <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>count<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出总计数值</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="ti-mu">题目②</span><a href="#ti-mu" class="header-anchor">#</a></h2><blockquote><p><strong>题目描述本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。  小明对数位中含有 2、0、1、9的数字很感兴趣，在 1 到 40 中这样的数包括 1、2、9、10 至 32、39和 40，共 28 个，他们的和是 574,平方和是 14362。注意，平方和是指将每个数分别平方后求和。请问，在 1 到 2019 中，所有这样的数的平方和是多少？</strong></p></blockquote><h3><span id="si-lu">思路</span><a href="#si-lu" class="header-anchor">#</a></h3><blockquote><p>这道题看起来有点类似于题目一，也是对数字位数的特殊判断，但是本题需要我们判断的条件有点多，我们采用另外一种思路来操作，即我们将数字转换成字符串类型，再采用范围for语句对字符串的每个字符进行遍历，符合条件的我们就标记为true(1)，如果不符合条件我们就标记为false(0)。然后我们再对符合条件的数据进行平方和处理即可。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化总平方和的变量sum，这里必须是long long 类型的，因为long long类型的数据范围是[-2^36,2^63-1],如果采用int类型，结果将溢出。</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2019</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>  string s <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将数据i转换成字符串类型赋值给s</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//采用范围for语句，对字符串s内的字符进行逐个遍历</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token string">'2'</span><span class="token operator">||</span>j<span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">||</span>j<span class="token operator">==</span><span class="token string">'1'</span><span class="token operator">||</span>j<span class="token operator">==</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否有字符满足条件</span>        <span class="token punctuation">{</span>            sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若满足条件则直接计入总平方和的计数</span>           <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有一个字符满足条件了，说明该数字已经被判断好了，无需对剩余字符进行判断了，可以直接退出循环了</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>         <span class="token punctuation">}</span>   cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出总的平方和</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="ti-mu">题目③</span><a href="#ti-mu" class="header-anchor">#</a></h2><blockquote><p><strong>题目描述本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。给定数列 1,1,1,3,5,9,17,⋯从第 4 项开始，每项都是前 3 项的和。求第 20190324 项的最后 4 位数字</strong></p></blockquote><h3><span id="si-lu">思路</span><a href="#si-lu" class="header-anchor">#</a></h3><blockquote><p>这道题的核心问题其实就对数据过大的处理，其实解决方案和第一题是一模一样的，题目需要你求最后四位数字，那我们就通过取余去保留最后四位数字，又因为根据加法原则，最后四位数的相加和其余位上的数没有直接关联，所有我们直接通过取余去缩小数据的值，在不影响所求结果的情况下继续使数据以较小的值进行相加。这样就可以完美解决本题了</p></blockquote><h3><span id="yuan-dai-ma">源代码</span><a href="#yuan-dai-ma" class="header-anchor">#</a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化最开始的前三位数</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20190324</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从第四位开始变量，遍历过程是a，b，c每次整体向后移一位</span>   <span class="token punctuation">{</span> temp<span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c代表最新的要更新的那个值，由于最新的那个值是前三位的值之和，平移的同时c的原数据不应被覆盖，所以我们拿一个临时变量temp用来存储c变量的原数据</span>     c<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把最新的值赋值给c，整除10000是为了缩小数据的值，保留最后四位</span>     a<span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将a数据向后平移一位，相当于把b的值赋给a</span>     b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b数据也要向后平移一位，相当于要把c的原数据赋值给b</span>   <span class="token punctuation">}</span>   cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c是最新的那个所求值，输出c即可</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><blockquote><p><strong>这第一题和第二题其实都存在对数据位数上的条件判断，对此我们可以有两种处理方案。①：灵活运用整除和取余，来去除数据的位数或者取出指定位数，以此来解决位数的条件判断问题。②：我们可以将数字直接转换成字符串类型，然后应用范围for循环依次对字符串的各个位数进行条件判断。还有这两道题还有一个烦人的点就是数据溢出问题，无论是题目一的乘积还是题目二的求总平方和，它们的结果的数据都会很大，这时候呢，我们要么采用题目一的分而治方式：先将明显存在的0计数完，然后去除计数完的0，然后运用乘法原则，发现数据的有些位数其实根本影响不到本题的求解，于是直接利用取余运算，将冗余部分的位数去除。或者采用第二题的方式，直接将计数变量的类型定位 long long 类型以支持数据的正常输出。第三道题核心就是保留最后四位数以减少数据的溢出的可能性，原理其实和第一题差不多。</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯2020年省赛填空题(七段码)</title>
      <link href="/2023/08/21/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E5%B9%B4%E7%9C%81%E8%B5%9B%E5%A1%AB%E7%A9%BA%E9%A2%98-%E4%B8%83%E6%AE%B5%E7%A0%81/"/>
      <url>/2023/08/21/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E5%B9%B4%E7%9C%81%E8%B5%9B%E5%A1%AB%E7%A9%BA%E9%A2%98-%E4%B8%83%E6%AE%B5%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1><span id="lan-qiao-bei-qi-duan-ma-2020-nian-sheng-sai">蓝桥杯：七段码（2020 年省赛）</span><a href="#lan-qiao-bei-qi-duan-ma-2020-nian-sheng-sai" class="header-anchor">#</a></h1><p>小蓝要用七段码数码管来表示一种特殊的文字。</p><p><img src="https://img1.imgtp.com/2023/08/21/6lAHTPLZ.jpg"></p><p> 七段码上图给出了七段码数码管的一个图示，数码管中一共有7 段可以发光的二极管，<br> 分别标记为a, b, c, d, e, f, g。小蓝要选择一部分二极管（至少要有一个）发光来表达字符。<br> 在设计字符的表达时，要求所有发光的二极管是连成一片的。<br>例如：b 发光，其他二极管不发光可以用来表达一种字符。<br>例如：c 发光，其他二极管不发光可以用来表达一种字符。这种方案与上一行的方案可以用来表示不同的字符，尽管看上去比较相似。<br>例如：a, b, c, d, e 发光，f, g 不发光可以用来表达一种字符。<br>例如：b, f 发光，其他二极管不发光则不能用来表达一种字符，因为发光的二极管没有连成一片。<br>请问，小蓝可以用七段码数码管表达多少种不同的字符？</p><h2><span id="wen-ti-fen-xi">问题分析</span><a href="#wen-ti-fen-xi" class="header-anchor">#</a></h2><h3><span id="wen-ti-jian-hua">问题简化</span><a href="#wen-ti-jian-hua" class="header-anchor">#</a></h3><blockquote><p><strong>根据题意所述，它需要我们求出能二极管能表达出的字符种类有多少个。那我们很容易就能想到这道题完全可以转换成求点到任意点的路径数量有多少的题目。但是由于a-&gt;b显示的图形和b-&gt;a显示出来的其实是一样的，所以最后的答案应该是路径的总数量/2</strong></p></blockquote><h3><span id="jie-jue-wen-ti">解决问题</span><a href="#jie-jue-wen-ti" class="header-anchor">#</a></h3><h4><span id="wen-ti-ti-chu">问题提出</span><a href="#wen-ti-ti-chu" class="header-anchor">#</a></h4><blockquote><p><strong>既然是搜索路径的题目，我们很容易就可以想到dfs深度优先遍历搜索算法，也就是选择任意一个点作为起始点，访问过的结点我们全部标记为True，随后不断进入子结点，直到碰到退出条件。dfs算法会对每个访问过的路径进行标记，标记过的结点则无法再次访问，这就导致了如果一个点到另外一个结点有两条路，dfs就只能优先遍历程序设置的那条路，另外一条路则不会被计算在内（如下演示图）</strong></p></blockquote><p><strong>正常的dfs遍历:</strong><br><img src="https://img1.imgtp.com/2023/08/21/DdRZJJeg.gif" alt="dfs"><br><strong>本题需要的遍历:</strong><br><img src="https://img1.imgtp.com/2023/08/21/bVTN4XtD.gif" alt="遍历"></p><h4><span id="jie-jue-fang-an">解决方案</span><a href="#jie-jue-fang-an" class="header-anchor">#</a></h4><blockquote><p>如上两个演示图，我们可以看到问题所在是dfs遇到返回条件返回的时候，遍历过的结点依旧被标记，这就导致了从B-&gt;D-E的路线，dfs其实是无法实现计算在内的。既然是标记结点的问题，那我们只要每一次遇到返回条件返回结点的时候把已经返回了的结点标记重置为False（未访问状态）不就可以完美解决本题了嘛，这就是基于DFS改编的<strong>回溯算法</strong>的雏形</p></blockquote><h3><span id="si-lu">思路</span><a href="#si-lu" class="header-anchor">#</a></h3><div id="flowchart-0" class="flow-chart"></div><h2><span id="he-xin-dai-ma-jiang-jie">核心代码讲解</span><a href="#he-xin-dai-ma-jiang-jie" class="header-anchor">#</a></h2><pre class="line-numbers language-xml"><code class="language-xml">void Backtracking(int i, int visit[], int *count) {    for (int j = 0; j &lt; 7; j++) /*依次从a（0），b（1），c（2），d(3)，e(4)，f(5)，g(6)这七个二极管分别作为出发点进行遍历*/    {        if (graph[i][j] == 1 &amp;&amp; visit[j] == 0) //如果两个结点之间有连接且要访问的那个结点没有被访问过则满足条件        {            visit[j]=1;//提前标记我们要进入的那个结点已经被我们访问了            dfs(j, visit, count);//进入新结点，从新结点的基础上继续搜索路径            ( *count)++;//回退的时候进行计数            visit[j] = 0;//将已经回退的那个结点访问标记重置为0                            }                                    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这里有一个细节要注意：我们的count初始化进来是值是1，因为存在一种情况：如果结点走到无路可走，程序其实是从if判断语句那里直接退出的，根本就没有进入if语句内部。也就是说当前的路径没有被计数进去，所以我们要在初始化count的时候就让它天然的就是以1为起步。</strong></p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;int graph[7][7] = {//如果两个相邻的结点有连接，则标记为1，例如：(0,1)，0->1有连接，那么我们的graph[0][1]=1，同时1->0也是有连接的，那我们的graph[1][0]=1        {1, 1, 0, 0, 0, 1, 0},        {1, 1, 1, 0, 0, 0, 1},        {0, 1, 1, 1, 0, 0, 1},        {0, 0, 1, 1, 1, 0, 0},        {0, 0, 0, 1, 1, 1, 1},        {1, 0, 0, 0, 1, 1, 1},        {0, 1, 1, 0, 1, 1, 1}};void Backtracking(int i, int visit[], int *count) {    for (int j = 0; j < 7; j++) {        if (graph[i][j] == 1 && visit[j] == 0) {            visit[j]=1;            dfs(j, visit, count);            ( *count)++;            visit[j] = 0;                            }                                    }}int main() {    int count = 1;//将count变量用来计数    int visit[7] = {0};//初始化访问标记数组    Backtracking(0, visit, &count);//调用回溯函数    cout << count / 2 << endl;//输出种类数    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=&gt;start: 创建一个7×7的数组，用来存储结点的连接情况op=&gt;operation: 自定义函数Backtracking用来遍历结点op1=&gt;operation: 在Backtracking函数中改编DFS算法使之成为回溯算法，且符合条件后每次回退都进行路径数量的计数op2=&gt;operation: 因为我们要求的是路径所显示的图形，比如从a-&gt;b显示的图形和b-&gt;a显示出来的其实是一样的，所以最后我们要求的图形种类应该是总路径/2end=&gt;end: 输出总路径/2st-&gt;op-&gt;op1-&gt;op2-&gt;end</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的简单理解</title>
      <link href="/2023/08/20/%E5%9B%BE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
      <url>/2023/08/20/%E5%9B%BE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2><span id="tu">图</span><a href="#tu" class="header-anchor">#</a></h2><h3><span id="li-yong-shu-zu-gou-jian-tu">利用数组构建图</span><a href="#li-yong-shu-zu-gou-jian-tu" class="header-anchor">#</a></h3><h4><span id="wu-xiang-tu"><strong>无向图</strong></span><a href="#wu-xiang-tu" class="header-anchor">#</a></h4><pre class="line-numbers language-xml"><code class="language-xml">#include &lt;bits/stdc++.h>using  namespace  std;typedef char VertexType;typedef int EdgeType;#define MAXVER 100#define INFINITY 65532typedef struct{    VertexType vexs[MAXVER];    EdgeType arc[MAXVER][MAXVER];    int numNodes,numEdges;}MGraph;void CreatMGraph(MGraph *G){    int i,j,k,w;    cout&lt;&lt;"输入顶点数和边数:"&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endl;</span>    <span class="token attr-name">cin</span><span class="token punctuation">></span></span>>G->numNodes>>G->numEdges;  //录入顶点和边数量的信息    cout&lt;&lt;"请输入顶点的具体的值"&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endl;</span>    <span class="token attr-name">for(i</span><span class="token attr-value"><span class="token punctuation">=</span>0;i&lt;G-</span><span class="token punctuation">></span></span>numNodes;i++)    {  cin>>G->vexs[i];    }    for(i=0;i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>G-</span><span class="token punctuation">></span></span>numNodes;i++)    {  for(j=1;j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>G-</span><span class="token punctuation">></span></span>numNodes;j++)        {           G->arc[i][j]=INFINITY;        }      }    for(k=0;k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>G-</span><span class="token punctuation">></span></span>numNodes;k++)    {  cout&lt;&lt;"输入边(vi,vj)的下标i，j，以及权重w"&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endl;</span>        <span class="token attr-name">cin</span><span class="token punctuation">></span></span>>i>>j>>w;        G->arc[i][j]=w;//输入权重值        G->arc[j][i]=w;    }//无向图的矩阵对称}int main(){    MGraph G1;//创建一个空的G1无向图变量     CreatMGraph(&amp;G1);//调用函数初始化G1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="li-yong-lian-biao-lai-gou-zao-tu">利用链表来构造图</span><a href="#li-yong-lian-biao-lai-gou-zao-tu" class="header-anchor">#</a></h3><h4><span id="wu-xiang-tu"><strong>无向图</strong></span><a href="#wu-xiang-tu" class="header-anchor">#</a></h4><pre class="line-numbers language-xml"><code class="language-xml">#include &lt;bits/stdc++.h>using  namespace  std;typedef char VertexType;typedef int EdgeType;#define MAXVEX 100#define INFINITY 65532typedef struct EdgeNode{ int adjvex;存储当前结点的位置    EdgeType weight;存储权值    struct EdgeNode *Next; 存储下一个指向的结点}EdgeNode; //构造出边表结点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码具象化：<br><img src="https://img1.imgtp.com/2023/08/20/PblUz2Ru.jpg" alt="构造出边表结点图"></p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">typedef struct VertexNode{    VertexType data;//存储顶点的数值    EdgeNode *firstedge;//存储顶点指向的下一个结点}VertexNode,AdjList[MAXVEX];//构造出顶点列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码具象化：<br><img src="https://img1.imgtp.com/2023/08/20/oNvo9jJN.jpg" alt="构造出顶点列表图"></p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">typedef struct{    AdjList adjList;    int numNodes,numEdges;}GraphAdjlist;void CreatMGraph(GraphAdjlist *G){    int i,j,k,w;    EdgeNode *e;//定义一个边表    cout&lt;&lt;"输入顶点数和边数:"&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endl;</span>    <span class="token attr-name">cin</span><span class="token punctuation">></span></span>>G->numNodes>>G->numEdges;    for (int i=0; i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>G-</span><span class="token punctuation">></span></span>numNodes ; ++i) {      cin>>G->adjList[i].data;//初始化顶点表的data数值      G->adjList[i].firstedge=NULL;//初始化顶点表的firstedge的数值    }    for(k=0;k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>G-</span><span class="token punctuation">></span></span>numEdges;k++)//    {        cout&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>"输入边（vi，vj）上的顶点序号";</span>        <span class="token attr-name">cin</span><span class="token punctuation">></span></span>>i>>j;        e=(EdgeNode *)malloc(sizeof(EdgeNode));//申请边表类型的一个临时内存        e->adjvex=j;//把j输入到边表结点的adjvex上，表达当前j的位置        e->Next=G->adjList[i].firstedge;//采用头插法将位置为j的边表结点插入到头节点i对应的下一个结点。         G->adjList[i].firstedge=e;        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码具象化：<br><img src="https://img1.imgtp.com/2023/08/20/XTAqW8FZ.jpg" alt="头插法"></p></blockquote><p><strong>因为是无向图，所以正反两面都要配置，上面是i-&gt;j的配置,下面的代码是j-&gt;i的配置</strong></p><pre class="line-numbers language-xml"><code class="language-xml">        e=(EdgeNode *)malloc(sizeof(EdgeNode));        e->adjvex=i;        e->Next=G->adjList[j].firstedge;        G->adjList[j].firstedge=e;            }        free(e);//释放申请malloc的动态内存}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="wan-zheng-dai-ma">完整代码</span><a href="#wan-zheng-dai-ma" class="header-anchor">#</a></h5><pre class="line-numbers language-xml"><code class="language-xml">#include &lt;bits/stdc++.h>using  namespace  std;typedef char VertexType;typedef int EdgeType;#define MAXVEX 100#define INFINITY 65532typedef struct EdgeNode{ int adjvex;存储当前结点的位置    EdgeType weight;存储权值    struct EdgeNode *Next; 存储下一个指向的结点}EdgeNode; //构造出边表结点typedef struct VertexNode{    VertexType data;//存储顶点的数值    EdgeNode *firstedge;//存储顶点指向的下一个结点}VertexNode,AdjList[MAXVEX];//构造出顶点列表typedef struct{    AdjList adjList;    int numNodes,numEdges;}GraphAdjlist;void CreatMGraph(GraphAdjlist *G){    int i,j,k,w;    EdgeNode *e;//定义一个边表    cout&lt;&lt;"输入顶点数和边数:"&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endl;</span>    <span class="token attr-name">cin</span><span class="token punctuation">></span></span>>G->numNodes>>G->numEdges;    for (int i=0; i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>G-</span><span class="token punctuation">></span></span>numNodes ; ++i) {      cin>>G->adjList[i].data;//初始化顶点表的data数值      G->adjList[i].firstedge=NULL;//初始化顶点表的firstedge的数值    }    for(k=0;k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>G-</span><span class="token punctuation">></span></span>numEdges;k++)//    {        cout&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>"输入边（vi，vj）上的顶点序号";</span>        <span class="token attr-name">cin</span><span class="token punctuation">></span></span>>i>>j;        e=(EdgeNode *)malloc(sizeof(EdgeNode));//申请边表类型的一个临时内存        e->adjvex=j;//把j输入到边表结点的adjvex上，表达当前j的位置        e->Next=G->adjList[i].firstedge;//采用头插法将位置为j的边表结点插入到头节点i对应的下一个结点。          G->adjList[i].firstedge=e;        e=(EdgeNode *)malloc(sizeof(EdgeNode));        e->adjvex=i;        e->Next=G->adjList[j].firstedge;        G->adjList[j].firstedge=e;             }        free(e);//释放申请malloc的动态内存}int main(){GraphAdjlist *G1; CreatMGraph(G1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯2017年省赛填空题（统计出迷宫的人数）</title>
      <link href="/2023/08/17/%E8%93%9D%E6%A1%A5%E6%9D%AF2017%E7%9C%81%E8%B5%9B%E5%A1%AB%E7%A9%BA%E9%A2%98%EF%BC%88%E8%BF%B7%E5%AE%AB%EF%BC%89/"/>
      <url>/2023/08/17/%E8%93%9D%E6%A1%A5%E6%9D%AF2017%E7%9C%81%E8%B5%9B%E5%A1%AB%E7%A9%BA%E9%A2%98%EF%BC%88%E8%BF%B7%E5%AE%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2><span id="lan-qiao-bei-2017-nian-sheng-sai-tian-kong-ti-mi-gong">蓝桥杯2017年省赛填空题：迷宫</span><a href="#lan-qiao-bei-2017-nian-sheng-sai-tian-kong-ti-mi-gong" class="header-anchor">#</a></h2><blockquote><p>题目描述:<br>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。<br>X 星球的一处迷宫游乐场建在某个小山坡上。它是由 10×10 相互连通的小房间组成的。<br>房间的地板上写着一个很大的字母。我们假设玩家是面朝上坡的方向站立，则：</p><ul><li>L 表示走到左边的房间，</li><li>R 表示走到右边的房间，</li><li>U 表示走到上坡方向的房间，</li><li>D 表示走到下坡方向的房间。</li></ul></blockquote><blockquote><p>X 星球的居民有点懒，不愿意费力思考。他们更喜欢玩运气类的游戏。这个游戏也是如此！<br>开始的时候，直升机把 100 名玩家放入一个个小房间内。玩家一定要按照地上的字母移动。<br>迷宫地图如下：<br>UDDLUULRUL<br>UURLLLRRRU<br>RRUURLDLRD<br>RUDDDDUUUU<br>URUDLLRRUU<br>DURLRLDLRL<br>ULLURLLRDU<br>RDLULLRDDD<br>UUDDUDUDLL<br>ULRDLUURRR<br>请你计算一下，最后，有多少玩家会走出迷宫，而不是在里边兜圈子？<br>如果你还没明白游戏规则，可以参看下面一个简化的 4x4 迷宫的解说图：<br><img src="https://img1.imgtp.com/2023/08/17/FEuRHtiB.jpg" alt="img"></p></blockquote><hr><h2><span id="zhi-shi-dian-chu-bei">知识点储备</span><a href="#zhi-shi-dian-chu-bei" class="header-anchor">#</a></h2><ul><li><strong>DFS深度优先遍历算法</strong></li><li><strong>树的前序遍历</strong></li><li><strong>递归</strong></li></ul><h3><span id="zhi-shi-dian-fu-xi">知识点复习</span><a href="#zhi-shi-dian-fu-xi" class="header-anchor">#</a></h3><h3><span id="shu-de-qian-xu-bian-li"><strong>树的前序遍历</strong>：</span><a href="#shu-de-qian-xu-bian-li" class="header-anchor">#</a></h3><h4><span id="kuai-su-gai-shu">快速概述</span><a href="#kuai-su-gai-shu" class="header-anchor">#</a></h4><blockquote><p>假如我们有如图所示的数据：<br><img src="https://img1.imgtp.com/2023/08/17/NWR3sFPX.jpg" alt="img"><br><strong>前置规定</strong>：我们规定把A作为根结点，且优先遍历左结点，直到左结点没有为止，然后再去走右结点，左右结点都遍历过了之后再回传到上一个父结点<br><strong>正式操作</strong>：我们从A结点开始出发，发现B和E结点两条路可以走，因为我们前置规定优先遍历左结点，所以走B结点，走到B结点发现左边没有结点可以走了，然后我们开始走B结点的右结点C，C结点之后按照同样的规定，我们依次遍历F、D 。走完D之后我们发现左右都没路了，我们开始回传到C结点、同样的F、D对结点于C来说是它的左右子结点， 我们已经遍历过了，于是C结点回传给B结点，同理B结点回传给A结点。对于A来说E结点还没遍历过，于是开始遍历E结点。E结点遍历之后按照同样的规则回传给A结点。至此，程序结束。</p></blockquote><hr><blockquote><p>文字描述看来很抽象，接下来我们直接放伪代码，来和文字结合理解一下。</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">struct Tree{  char data[2];//存储结点的名字    struct Tree *LeftNode;//存储结点左边的子节点    struct Tree *RightNode;//存储结点右边的子节点}*T;//创建树的结点T/*读入数据初始化结点T*/Void PreOrderTraverse(结点T){    if(T==NULL)  //如果该结点是空的，就执行return直接退出当前自定义函数         return;    print("%c",T->data);//打印当前结点的名字    PreOrderTraverse(T->LeftNode);//进入结点左边的子节点    PreOrderTraverse(T->RightNode);//进入结点右边的子节点}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h4><blockquote><p>核心语句:</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">    print("%c",T->data);//打印当前结点的名字    PreOrderTraverse(T->LeftNode);//进入结点左边的子节点    PreOrderTraverse(T->RightNode);//进入结点右边的子节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>其实前序遍历的本质就是一个递归算法。前序遍历的第一句是 <strong>print(“%c”,T-&gt;data);</strong> 直接打印当前结点的名字，第二句<strong>PreOrderTraverse(T-&gt;LeftNode);</strong> 的意思是不断地进入左边的子结点，直到结点为空。同理第三句<strong>PreOrderTraverse(T-&gt;RightNode);<strong>的意思是承接第二句执行后的结点，去遍历这个结点的右边子节点。有就打印，没有（或者遍历过）就返回这个结点的父节点。</strong>结束标准：A结点的右边子节点全部遍历完毕，返回到A结点，则判定程序结束。</strong></p></blockquote><h3><span id="dfs-shen-du-you-xian-bian-li-suan-fa">DFS深度优先遍历算法</span><a href="#dfs-shen-du-you-xian-bian-li-suan-fa" class="header-anchor">#</a></h3><blockquote><p>了解了树的前序遍历之后呢，我们就来介绍我们的重头戏<strong>DFS深度优先遍历算法</strong></p><blockquote><p>在此之前，我想提出一个问题：假如你现在处于一个迷宫里面，里面有7个房间，你想要去碰碰运气找遍所有房间，那你该怎么做？</p></blockquote><blockquote><p>我觉得大部分人的第一反应就是从某个房间出发，然后不断一个一个找过去，已经走过的，我们就标记一下，直到又回到了出发的那个房间为止。</p><blockquote><p><strong>这种方式就是DFS深度优先遍历算法的雏形</strong></p></blockquote></blockquote></blockquote><h4><span id="kuai-su-gai-shu">快速概述</span><a href="#kuai-su-gai-shu" class="header-anchor">#</a></h4><blockquote><p>假如我们有如下的数据<br><img src="https://img1.imgtp.com/2023/08/17/v5n6Efb3.jpg" alt="img"><br><strong>前置规定</strong>：我们可以随机选择一个结点作为根结点，且优先遍历左结点，（<strong>同时每走一个结点，我们用变量 visit 标记一下，表明我们走过这个结点了。</strong>）</p><blockquote><p><strong>回退结点的规则</strong>：<strong>若结点被visit标记了或者左右结点都不存在</strong></p></blockquote></blockquote><blockquote><p><strong>正式操作</strong>：我们从A结点开始出发，发现B和E结点两条路可以走，因为我们前置规定优先遍历左结点，所以走B结点，B结点左边是C结点，于是我们来到了C结点，同理C结点的的左边是F，F的左节点是G，G的左节点是E，E的左节点是A结点，但是A是我们走过的结点，已经用visit标记了，于是我们从A返回到E结点，继续执行E结点剩余的程序，显然E结点没有右子结点了，于是我们退回G结点，按照同样的规律，最后我们将退回结点到A结点，至此，程序结束。</p></blockquote><blockquote><blockquote><p><strong>看到这里，有没有发现DFS深度优先遍历算法其实就是前序遍历算法的变式呀，只不过DFS深度遍历算法增加了变量visit用来标记已经变量过的结点，以此来提早退回遍历过的结点。</strong></p></blockquote></blockquote><h4><span id="dai-ma-shi-xian">代码实现</span><a href="#dai-ma-shi-xian" class="header-anchor">#</a></h4><pre class="line-numbers language-c++"><code class="language-c++">struct Tree{  char data[2];//存储结点的名字   int vist=0;//规定visit=0还没有被遍历，visit=1，则已经被遍历    struct Tree *LeftNode;//存储结点左边的子节点    struct Tree *RightNode;//存储结点右边的子节点}*T;//创建树的结点T/*读入数据初始化结点T*/Void PreOrderTraverse(结点T){    if(T==NULL)  //如果该结点是空的，就执行return直接退出当前自定义函数         return;     if (visit==1)//如果当前结点已经被访问过了，那么直接退出当前自定义函数，         return ;                                        // 返回上一个结点        T->visit=1; //当前结点已经被遍历    print("%c",T->data);//打印当前结点的名字    PreOrderTraverse(T->LeftNode);//进入结点左边的子节点    PreOrderTraverse(T->RightNode);//进入结点右边的子节点}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="xi-jie-jie-shi">细节解释</span><a href="#xi-jie-jie-shi" class="header-anchor">#</a></h5><p><img src="https://img1.imgtp.com/2023/08/17/v5n6Efb3.jpg" alt="img"></p><blockquote><p>假如我们已经从E执行到了A结点，此时我们发现A是已经被visit标记了的,源代码对应：</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">if (visit==1)//如果当前结点已经被访问过了，那么直接退出当前自定义函数，    return;                      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><blockquote><p>此时我们从A回退到E结点来执行E结点的剩余代码：<br><strong>PreOrderTraverse(T-&gt;RightNode);//进入结点右边的子节点</strong><br><strong>因为是回退结点，而不是对该结点的重头开始执行，所以从A结点回退到E结点的时候，对于E结点来说：   PreOrderTraverse(T-&gt;LeftNode);已经执行完毕，所以我们只要执行它的下一行PreOrderTraverse(T-&gt;RightNode);即可。</strong></p></blockquote><hr><h2><span id="ti-mu-jiang-jie">题目讲解</span><a href="#ti-mu-jiang-jie" class="header-anchor">#</a></h2><blockquote><p>有了上面的知识储备之后， 我们回归题目本身</p></blockquote><h3><span id="si-lu">思路</span><a href="#si-lu" class="header-anchor">#</a></h3><div id="flowchart-0" class="flow-chart"></div><h3><span id="yuan-dai-ma">源代码</span><a href="#yuan-dai-ma" class="header-anchor">#</a></h3><pre class="line-numbers language-xml"><code class="language-xml">//#include &lt;bits/stdc++.h>#include<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iostream</span><span class="token punctuation">></span></span>#include<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string.h</span><span class="token punctuation">></span></span>using  namespace  std;char Maps[10][10]={        'U','D','D','L','U','U','L','R','U','L',        'U','U','R','L','L','L','R','R','R','U',        'R','R','U','U','R','L','D','L','R','D',        'R','U','D','D','D','D','U','U','U','U',        'U','R','U','D','L','L','R','R','U','U',        'D','U','R','L','R','L','D','L','R','L',        'U','L','L','U','R','L','L','R','D','U',        'R','D','L','U','L','L','R','D','D','D',        'U','U','D','D','U','D','U','D','L','L',        'U','L','R','D','L','U','U','R','R','R'};//初始化地图int visit[10][10];//创建visit变量void dfs(int i,int j,int*count) {    if (i&lt;0||i>9||j&lt;0||j>9)    {        (*count)++;//人数+1。count我们传入的是指针，这样可以实现自定义外函数的count也在同步变化        return ;//过程中没有一次碰到走过的路，并且最后来到了地图边缘，此时我们可以判定出迷宫了    }   else    {        if(visit[i][j])        {  return ;        }//假如走的时候发现这条路是走过的，说明是鬼打墙。就不需要继续走下去了，可以直接提早结束            visit[i][j]=1;//走过的块我们标记为1说明已经走过了            if (Maps[i][j]=='U')                dfs(i-1,j,count);//当前方块是U的话就行数减一,向上走            else if (Maps[i][j]=='D')//当前方块是D的话行数加一，向下走                dfs(i+1,j,count);            else if(Maps[i][j]=='L')//当前方块是L的话列数减一，向左走                dfs(i,j-1,count);            else if (Maps[i][j]=='R')//当前方块是L的话列数加一，向右走                dfs(i,j+1,count);    }}int main(){ int count=0;//初始化能够走出迷宫的人数    for(int i=0;i&lt;10;i++)    {        for(int j=0;j&lt;10;j++)        {            memset(visit, 0, sizeof(visit));//memset是用来将visit里面的数组的值全部初始化为0            dfs(i,j,&amp;count);        }//通过两个for循环嵌套去逐个对每个方格进行dfs遍历搜寻判断    } cout&lt;&lt;count&lt;&lt;endl;//输出count即可}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路借鉴：<a href="https://blog.csdn.net/SakuraZhangrx/article/details/106922392">https://blog.csdn.net/SakuraZhangrx/article/details/106922392</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=&gt;start:  用数组初始化10×10的地图op=&gt;operation:  命名一个自定义函数为dfs()，其中dfs中正常能够出地图的，我们采用count变量+1来统计op1=&gt;operation: 主程序中我们使用嵌套for循环依次对地图的每一块依次变量e=&gt;end: 输出countst-&gt;op-&gt;op1-&gt;e</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记(一)：算法复杂度（基础篇）</title>
      <link href="/2023/08/15/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%AE%80%E8%A6%81%E6%A6%82%E6%8B%AC(%E5%9F%BA%E7%A1%80%E7%AF%87)/"/>
      <url>/2023/08/15/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%AE%80%E8%A6%81%E6%A6%82%E6%8B%AC(%E5%9F%BA%E7%A1%80%E7%AF%87)/</url>
      
        <content type="html"><![CDATA[<h2><span id="suan-fa-fu-za-du-fen-xi-jian-yao-gai-gua">算法复杂度分析简要概括</span><a href="#suan-fa-fu-za-du-fen-xi-jian-yao-gai-gua" class="header-anchor">#</a></h2><p><strong>算法复杂度</strong></p><ul><li><strong>时间复杂度</strong></li><li><strong>空间复杂度</strong></li></ul><hr><blockquote><p>时间复杂度的简单理解：进行算法分析时，我们假设每行的每次执行时间是t，n是某个循环的中止值。随后我们统计下所有行的代码执行次数，记作f(n)，那么我们整个的程序的总的执行时间T为:f(n)×t。根据T函数我们可以看出T与f(n)成正比。此时我们就可以根据f(n)的函数增长率去估算时间复杂度，<strong>这里我们需要注意的是,我们只关注函数的增长率，而不关注n究竟是多大。</strong></p></blockquote><h2><span id="tui-dao-fang-fa-jie-shao">推导方法介绍</span><a href="#tui-dao-fang-fa-jie-shao" class="header-anchor">#</a></h2><h3><span id="tui-dao-liu-cheng">推导流程</span><a href="#tui-dao-liu-cheng" class="header-anchor">#</a></h3><div id="flowchart-0" class="flow-chart"></div><p><strong>核心：只关注推导出来的函数的最高阶项的阶数</strong></p><h3><span id="ju-ge-li-zi">举个栗子</span><a href="#ju-ge-li-zi" class="header-anchor">#</a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行1次</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行n+1次</span><span class="token punctuation">{</span> count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行n次</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>根据注释可推出总次数的函数式f(n)=1+n+1+n=2n+2</p></blockquote><p><strong>化简原则:</strong></p><ul><li><strong>①函数如果是一个常数，不管多大，全用1代替，记作O(1)</strong></li><li><strong>②函数只保留最高阶项，若最高阶项的系数是常数，则统一用1代替，否则保留系数</strong></li></ul><blockquote><p>本题根据化简原则②可以将f(n)=2n+2，记作f(n)=n,即O(n),这就是我们这段程序的时间复杂度</p></blockquote><h3><span id="yi-wen">疑问</span><a href="#yi-wen" class="header-anchor">#</a></h3><blockquote><p>Q1:刚学的时候，关于这道例子我是有一个问题的，那就是n明明在一开始的时候就定义了n=100。那n不应该是一个常数吗？我的函数式不应该写成1+100+1+100=202吗？时间复杂度应该是O(1)而不是O(n)呀</p></blockquote><hr><blockquote><p>A1：我认为时间复杂度的理解应该是基于过程而言的，而不是基于结果的。基于结果，整个n肯定是一个有结果的值，我们可以看作它是一个基于常数时间复杂度的算法。但是当我们谈论时间复杂度时，我们通常会假设 n 是一个变量，它可以取任意值。这样我们就可以分析算法的运行时间随着输入数据规模的增长而增长的速度。</p><p>回到上面的问题，f(n)=2n+2,我们说n=100的时候，我们从结果的角度看，的确它可以叫做O(1)的时间复杂度，但是n是可以变化的，n可以是1，2，3……10000等等。也就是说我们是不只研究单单n=100这一个例子。我们研究的是一整个关于f(n)函数的增长变化情况的全局，本题的例子中这个f(n)的变化明显是类似于线性的变化，于是我们根据化简原则，可以得出时间复杂度是O(n),而不是O(1)<br><img src="https://img1.imgtp.com/2023/08/16/2LRqrNWv.png" alt="img"></p></blockquote><h3><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h3><blockquote><p><strong>算法的复杂度是基于过程的而非单一的结果,根据循环的规律去写出次数对应的函数是关键，因为我们研究的是函数的整体变化速率。最后，根据化简原则，我们将函数化简之后得到的表达式就是我们需要的时间复杂度O()</strong><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=&gt;start: 列出各行代码的执行次数op=&gt;operation: 统计总次数并且写成函数式子op1=&gt;operation: 对函数式子进行化简处理e=&gt;end: 分析结果st-&gt;op-&gt;op1-&gt;e</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="/2023/08/15/%E5%89%8D%E8%A8%80/"/>
      <url>/2023/08/15/%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不对，再猜猜看​哦​​" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="de20ada64d45e167730ca27b47035878f90521d734bd5fc0800411b02677437f">b73bd50429e4d350727cbeb8853cc6e01370542e623e305232d186e04af4e956df389a6edebda500d4a6712dc0b98f9409d6a7277845de7cc7f479225ad268e4ab752c764786fc88e4ad5a74885d07a147784a906a12ff8a59ee3d1e55cc3c29070ae1b9cf284a973cd36aff7fb34e12c2b4237fabeeec1c0e07aa198bc48ceabddc15acdf5503faab122893782f96c0094f33a021bfc6628849d4f0be4f188039678e57529e532d08fc1c48a515fece4890ac794ce627c98fc185a44c351a66923555f935a5141d7ef9c3d05ba7b9cd349f26d200c074fd04f7b20f8cc695b5ce0a7504f82bc8adcfe6777f3183bf6a5e102909c18ab2188701f146a084ba25cf4d4ed8c1bd166ecedc53951196aa4115bd619a440dcfe7fbc9dee447093fcff5b8e11926bbcda21b6e011533cd0579588b11a1cd4d340c111cab869f15064f3108d2ec8a92e22bc45184a12f08abc9ab4aa67f3e3d772fe64d809d6f411a3db127e49ae700b9e965f3b539aa03e11ca554960a9bd540e901a562a6e276760d604f5c60a064095f69d6bfe09a1acf18af29332a0ff1eb0b7805146d9217e3da5b584d91b3f22cc5936fad0ac04b99ac0c3504ff998e4d084d6492d7217a769372103e9dbc91f3e41ac66e5e735d0c8da38bdaa3d25f16f1f0f6d887bbc62ab298170c552e6853969d44910312c290941dc6e9a2beaa7935905027c56d1238c5aa62b04296f651f77716a124fa932da309c3f0415711870950f02b58da491d2d316049087d9e2ec16ac0a3bcca8f22235abf777c036c9e2e71ab2f7843084d2af598788aa2b10baa00fec2a726b9981542628ad83525696570a7012c9f0912cc1e5a1640f37ba90490bdb573037a7a1fc683b1888963075c3db3af70dbf0da18b5d60b6f832f00b49dad7940c0cc5b41b2dfcf46a39271952a596ed88489585588478e3130b24bb21cec41af886bf03ca670ca70b077ccd19185f8d6521856124715c89b217fa57965313cf6f5383fe62e4b0e46bec1b973b89bce7b41073d660304585155befe8cccb53714826779bb6487b37d4e40f5cc7518e4978cd73c7cc7bec7ba15d133f4608351137943e2254667bda804f183842430e528e272935981cd25a569010fda4fdb5ed313c14c088f3d4622bae232f85c5d2e03c2370e1d57b471673aba3e89b701501e38de16155eb16d963e94b81f0b49b5c2992f802225e3c7e67e2e8860006c4dca17d0fd1b8f85f41c93c613b7fa26c1f8d122271f42f27e5a4ee3edfaa2c55b5daca0a55b8687259d963e3c0c5d514f9efac53a5bfa61dfea81e6a191f52773f2e2a996eb63aff7e38f91113fee83403fef7b4206b85fea9d98a4194ddda6f234d4904cd16ad000293310ca250c479b9ad08b0bd7c13c6e9f643af33d60a5f9ed7f429d3b9c1215eb105d3cd427fe80cf5f815841901b305c3e89779ab9043afa2c8a1d64543e42dfa0c78b01af0f6a63c4b4c29be8f1c73f436448bca5bb136ef8eed3edf70c4499200dcc4c745d5e341c94883a15943b5206c5d8793cdee3cb68add68bf86b7f37f92cb46e7bc0ad8e0da810af326c6f31f662ad1ef5b178effe23b21cb8c90de0f0df30150a15b066e26a90744ab0285d417e53af844f00a6e1987ec8972ca61d7706c03e38c4afcf0d482fe0f6e37eaf167bb9a50e1274be8ff7d459ffde2e5b168d1995127beb831dad28814e8c7de8bbc375f716995a2d854936421c9b029d985b2e0cf4e1c195b278e62e63ce57c86ccadfc9ce8c878507e762ce32f2e28d0fe1d1eca30df2478e8896631dd192172eab6d031ee61d9956a5190f9ef2c78b2689b65b5f654e1b2357f56e742da60e83fc770874c6d6d9ad73ccec27901fd37029def798d76633cb1594350001c1dabaf44c55476c14ec5b591681034dbb033527f3300ea1f58c8a9796e5f0c538afda99661e67efceb188fb61886f67bf16872192088e356a62dcb1afe4ea80bea24ad68caf683f681de2c8bb65516e79268e2e4b8c62b4384bb1725c3a6f4acfd8f4e5baba59759f4c921c6361e4370a2622dfd72a4c1f8ddff49a38127d843ce9ef83048bb326c8a8c4db92d1a515746adf2f470d058393f0d2a2f5ba215c2d987c931e4c0cd496dcd9aa084ef71a8e6427de5ba87220c12fa8ca74cc100ec8fae736394143f13e7f626265c65482f11213821550d6655a7a1d7ab0125db01635927b9ce9fba300054c352e1dc47f0c273d87172994cf5e15f80e78ea958fcfbd739c4e0be324674abafcec7255140a01f90f2c23b0cfdfa2a2bfa8b64b8d9ecf4fc650cf664e4ac680316efc04bb61a9fc2a18849b2cea57fcfb81bfa1c95d7a8a3a5e4ded32c657a033bb464ade521c16fd61f7b2de7529dd470b12f59a6cb3d3ebce522e30237aec819f9533873c7d50b2dc4a7fd24853bbb67df7dc50120236fc8308e428e85710f27a47493dccd9c40d71b58a5f54f1ba0d7d8aee43dcd1f5519f96c79ef291750f009fc61eb1f293d72847240fc34f0d981e6e9304fb3f7a7673909a20282ec7c90fec365cd95e9f6aeb7bbcb8e784fe2f3edc359dca7df40ddb48c2d39e617b7034c77dc76ee57865e0be1d8741fea612c8ccbfb2ba595f4620971c4bec3a393fbf49fadf7c98b5ef52a44b9f40a995ba71e83b72b01c9ae6f0c1115fae0c26e1fd9d7cbd5979932f54826b4ce96382bcc4a9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 前言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
